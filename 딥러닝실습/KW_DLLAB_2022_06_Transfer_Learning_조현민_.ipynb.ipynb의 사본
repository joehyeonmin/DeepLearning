{"cells":[{"cell_type":"markdown","metadata":{"id":"PNR351ge7Qb9"},"source":["# Transfer learning & fine-tuning\n","by uramoon@kw.ac.kr<br><br>\n","\n","Xception을 사용하여 고양이와 개를 분류해봅시다.<br>\n","런타임 유형은 가급적 GPU로 설정하세요. (CPU도 가능)<br><br>\n","\n","**Author:** [fchollet](https://twitter.com/fchollet)<br>\n","**Date created:** 2020/04/15<br>\n","**Last modified:** 2020/05/12<br>\n","**Description:** Complete guide to transfer learning & fine-tuning in Keras.<br>\n","(<a href=\"https://raw.githubusercontent.com/ronreiter/interactive-tutorials/master/LICENSE\">Apache 2.0 License</a>)"]},{"cell_type":"markdown","metadata":{"id":"EseCFXYV7QcA"},"source":["## Setup"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yfI7THmn7QcA"},"outputs":[],"source":["import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras"]},{"cell_type":"markdown","metadata":{"id":"nm0AGWSs7QcB"},"source":["## 소개\n","\n","**전이 학습**은 어떤 문제에 대해 학습된 특징들을 새로운 문제의 풀이에 사용하는 것을 뜻합니다. <br>예를 들면, 라쿤을 인식하는 모델에서 사용되는 특징들로 너구리를 인식하는 데 사용할 수 있을 것입니다.<br>\n","\n","<img src=\"https://extension.umd.edu/sites/extension.umd.edu/files/styles/optimized/public/2021-02/hgic_veg_wildlife_raccoon.jpg?itok=p4k_Z_CF\" height=\"200\"><figcaption>라쿤 사진 출처: https://extension.umd.edu/resource/raccoons</figcaption>\n","\n","<img src=\"https://image-notepet.akamaized.net/resize/620x-/seimage/20171108%2Fe6d1ec360a4ab04e21e580882d9c989e.jpg\" height=\"200\"><figcaption>너구리 사진 출처: https://www.notepet.co.kr/news/article/article_view/?idx=10434</figcaption>\n","\n","전이학습은 다음의 수행절차를 갖습니다.\n","1. 기존에 훈련된 모델을 가져온다.\n","2. 가져온 모델을 훈련이 불가능하도록 설정한다. (가중치들을 고정시킴)\n","3. 가져온 모델의 밖에 몇 개의 층을 붙인다.\n","4. 내가 추가한 층만 나의 데이터로 훈련시킨다.\n","\n","추가적으로 고정시킨 모델을 훈련 가능하도록 풀어버려 세부 튜닝을 시도할 수도 있습니다.\n","\n","This is adapted from\n","[Deep Learning with Python](https://www.manning.com/books/deep-learning-with-python)\n"," and the 2016 blog post\n","[\"building powerful image classification models using very little\n"," data\"](https://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html)."]},{"cell_type":"markdown","metadata":{"id":"6MHi_AVw7QcI"},"source":["## 데이터 가져오기\n","원래 25,000장의 그림이 있는데 15,000장만 가져와서 그 중 10,000장은 훈련, 2500장은 검증, 2500장은 테스트에 사용하겠습니다.<br>\n","(오염된 이미지들이 있어서 다 받아오진 못하고 수 백장의 사진이 걸러집니다.)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MvBpIk2u7QcI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649404399820,"user_tz":-540,"elapsed":30788,"user":{"displayName":"조현민","userId":"13701119480392953941"}},"outputId":"57f0bd73-0ee7-46cb-c0e4-e71e7a48e9c7"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1mDownloading and preparing dataset cats_vs_dogs/4.0.0 (download: 786.68 MiB, generated: Unknown size, total: 786.68 MiB) to /root/tensorflow_datasets/cats_vs_dogs/4.0.0...\u001b[0m\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:1738 images were corrupted and were skipped\n"]},{"output_type":"stream","name":"stdout","text":["Shuffling and writing examples to /root/tensorflow_datasets/cats_vs_dogs/4.0.0.incompleteJ77UP1/cats_vs_dogs-train.tfrecord\n","\u001b[1mDataset cats_vs_dogs downloaded and prepared to /root/tensorflow_datasets/cats_vs_dogs/4.0.0. Subsequent calls will reuse this data.\u001b[0m\n","Number of training samples: 9305\n","Number of validation samples: 2326\n","Number of test samples: 2326\n"]}],"source":["import tensorflow_datasets as tfds\n","\n","tfds.disable_progress_bar()\n","\n","train_ds, validation_ds, test_ds = tfds.load(\n","    \"cats_vs_dogs\",\n","    # Reserve 10% for validation and 10% for test\n","    split=[\"train[:40%]\", \"train[40%:50%]\", \"train[50%:60%]\"],\n","    as_supervised=True,  # Include labels\n",")\n","\n","print(\"Number of training samples: %d\" % tf.data.experimental.cardinality(train_ds))\n","print(\n","    \"Number of validation samples: %d\" % tf.data.experimental.cardinality(validation_ds)\n",")\n","print(\"Number of test samples: %d\" % tf.data.experimental.cardinality(test_ds))"]},{"cell_type":"markdown","source":["## TODO1: 데이터셋 전처리하기"],"metadata":{"id":"1X1NIOLN_u6L"}},{"cell_type":"code","source":["# 각 데이터셋의 크기 변경하기\n","size = (150, 150)\n","\n","train_ds = train_ds.map(lambda x, y: (tf.image.resize(x, size), y))\n","validation_ds = validation_ds.map(lambda x, y: (tf.image.resize(x, size), y)) \n","test_ds = test_ds.map(lambda x, y: (tf.image.resize(x, size), y)) "],"metadata":{"id":"kQSbgHOW_0g-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Xception의 전처리 기법 적용하기\n","from tensorflow.keras.applications.xception import Xception\n","from tensorflow.keras.applications.xception import preprocess_input\n","\n","train_ds = train_ds.map(lambda x, y: (preprocess_input(x), y)) #TODO\n","validation_ds = validation_ds.map(lambda x, y: (preprocess_input(x), y)) #TODO\n","test_ds = test_ds.map(lambda x, y: (preprocess_input(x), y)) #TODO"],"metadata":{"id":"uTwL6NIE_-3l"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 데이터셋을 32장씩 묶읍시다.\n","batch_size = 32\n","\n","train_ds = train_ds.cache().batch(batch_size).prefetch(buffer_size=10)\n","validation_ds = validation_ds.cache().batch(batch_size).prefetch(buffer_size=10)\n","test_ds = test_ds.cache().batch(batch_size).prefetch(buffer_size=10)"],"metadata":{"id":"A5WzWUapAcVd"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hhtbx3Xq7QcK"},"source":["## TODO2: 데이터 증강 층 만들기<br>\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cFmmTjHU7QcK"},"outputs":[],"source":["from tensorflow import keras\n","from tensorflow.keras import layers\n","\n","data_augmentation = keras.Sequential(\n","    [layers.RandomFlip('horizontal'), layers.RandomRotation(0.1),] #TODO: 각 괄호 안에 값을 넣으셔야 합니다.\n",")"]},{"cell_type":"markdown","metadata":{"id":"0vZcwfo47QcK"},"source":["## TODO3: 모델 정의하기\n","\n","가져온 모델 앞에 입력층과 데이터 층강층을 추가하고 뒤에 예측하는 부분 (MLP와 같은 Dense층) 을 추가합니다."]},{"cell_type":"code","source":["from keras import models\n","from keras import layers\n","\n","base_model = keras.applications.Xception(\n","    weights=\"imagenet\", # ImageNet에 대해서 훈련된 모델을 가져옵니다.\n","    input_shape=(150, 150, 3),\n","    include_top=False,  # 개와 고양이를 예측할 것이기 때문에 ImageNet 데이터를 예측하는 층을 포함하지 않습니다.\n",")  \n","# Xception은 훈련이 불가능하도록 설정합니다.\n","base_model.trainable = False\n","\n","model = models.Sequential()\n","\n","#TODO: 입력층 추가\n","model.add(layers.Input(shape=(150, 150, 3)))\n","\n","#TODO: 데이터 증강층 추가\n","model.add(layers.RandomFlip('horizontal')) #TODO: 위에서 만든 층을 넣으세요.\n","model.add(layers.RandomRotation(0.1))\n","\n","#가져온 모델 추가\n","model.add(base_model)\n","\n","# MLP는 일차원으로 펼쳐진 입력이 필요합니다. \n","# 아래 둘 중 원하는 것 하나만 쓰세요.\n","# Xception은 5 x 5 사이즈의 2048개 채널을 출력합니다.\n","model.add(layers.Flatten()) # 각 채널의 모든 픽셀들을 일차원으로 이어붙이는 무식하고 낡은 방법 (25개 x 2048장)\n","#model.add(layers.GlobalAveragePooling2D()) # 각 5 x 5 채널을 하나의 값으로 요약한 후 일차원으로 이어붙이는 방법 (2048개)\n","\n","# 출력층 추가 (0~1 출력하는 노드 하나만 필요하고 적절한 활성화 함수 기재)\n","model.add(layers.Flatten())   \n","model.add(layers.Dense(1,activation=\"sigmoid\"))\n","\n","# 컴파일\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=[\"accuracy\"]) "],"metadata":{"id":"AoJ0jaoUCKpI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649404521200,"user_tz":-540,"elapsed":2263,"user":{"displayName":"조현민","userId":"13701119480392953941"}},"outputId":"3ed68b83-9e0d-4ed5-9122-739719814391"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/xception/xception_weights_tf_dim_ordering_tf_kernels_notop.h5\n","83689472/83683744 [==============================] - 0s 0us/step\n","83697664/83683744 [==============================] - 0s 0us/step\n"]}]},{"cell_type":"code","source":["# 직접 만들었던 모델과 비교해보세요.\n","model.summary()"],"metadata":{"id":"ysKY9a2VDzPP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649404542068,"user_tz":-540,"elapsed":371,"user":{"displayName":"조현민","userId":"13701119480392953941"}},"outputId":"49f7042c-a5cf-4bf9-87db-411706dd80ae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," random_flip_1 (RandomFlip)  (None, 150, 150, 3)       0         \n","                                                                 \n"," random_rotation_1 (RandomRo  (None, 150, 150, 3)      0         \n"," tation)                                                         \n","                                                                 \n"," xception (Functional)       (None, 5, 5, 2048)        20861480  \n","                                                                 \n"," flatten (Flatten)           (None, 51200)             0         \n","                                                                 \n"," flatten_1 (Flatten)         (None, 51200)             0         \n","                                                                 \n"," dense (Dense)               (None, 1)                 51201     \n","                                                                 \n","=================================================================\n","Total params: 20,912,681\n","Trainable params: 51,201\n","Non-trainable params: 20,861,480\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"l_9fLIML7QcL"},"source":["## 훈련하기"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OjvNyH3y7QcL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649404675832,"user_tz":-540,"elapsed":126645,"user":{"displayName":"조현민","userId":"13701119480392953941"}},"outputId":"e5db773b-344d-49c0-fad5-92f01cdbc052"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","291/291 [==============================] - 38s 84ms/step - loss: 0.3587 - accuracy: 0.9306 - val_loss: 0.2101 - val_accuracy: 0.9673\n","Epoch 2/5\n","291/291 [==============================] - 22s 76ms/step - loss: 0.3714 - accuracy: 0.9438 - val_loss: 0.2092 - val_accuracy: 0.9716\n","Epoch 3/5\n","291/291 [==============================] - 22s 77ms/step - loss: 0.3516 - accuracy: 0.9505 - val_loss: 0.2249 - val_accuracy: 0.9652\n","Epoch 4/5\n","291/291 [==============================] - 22s 75ms/step - loss: 0.3584 - accuracy: 0.9512 - val_loss: 0.2997 - val_accuracy: 0.9626\n","Epoch 5/5\n","291/291 [==============================] - 22s 75ms/step - loss: 0.2802 - accuracy: 0.9592 - val_loss: 0.2967 - val_accuracy: 0.9690\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f89cd1c2650>"]},"metadata":{},"execution_count":9}],"source":["epochs = 5\n","model.fit(train_ds, epochs=epochs, validation_data=validation_ds)"]},{"cell_type":"markdown","source":["## 테스트 데이터로 평가해보기"],"metadata":{"id":"Arcvlsa_Ge7p"}},{"cell_type":"code","source":["model.evaluate(test_ds)"],"metadata":{"id":"xwHixM5yGhIJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649404747062,"user_tz":-540,"elapsed":5016,"user":{"displayName":"조현민","userId":"13701119480392953941"}},"outputId":"3481e8a6-ed1b-4eff-e51f-1d699a937061"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["73/73 [==============================] - 5s 61ms/step - loss: 0.3183 - accuracy: 0.9665\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.3182850480079651, 0.9664660096168518]"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["<img src='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FW0TLL%2FbtqRx0uGeC2%2FKxbOgpwhzXXvwu1VtcmjNK%2Fimg.jpg' height=200>"],"metadata":{"id":"e7MyLKdpGhug"}},{"cell_type":"code","source":["# 0.7868 -> 0.9665\n","# 차이가 많이난다"],"metadata":{"id":"5T9TXpBHNdnB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qA2QpMBl7QcL"},"source":["## 세부 튜닝하기\n","\n","가져온 모델인 Xception까지 우리 데이터에 맞게 훈련해봅시다."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WSBAgWEj7QcL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649405186815,"user_tz":-540,"elapsed":417118,"user":{"displayName":"조현민","userId":"13701119480392953941"}},"outputId":"c9fe4bf8-34c9-4085-d552-506f9ddb0a61"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," random_flip_1 (RandomFlip)  (None, 150, 150, 3)       0         \n","                                                                 \n"," random_rotation_1 (RandomRo  (None, 150, 150, 3)      0         \n"," tation)                                                         \n","                                                                 \n"," xception (Functional)       (None, 5, 5, 2048)        20861480  \n","                                                                 \n"," flatten (Flatten)           (None, 51200)             0         \n","                                                                 \n"," flatten_1 (Flatten)         (None, 51200)             0         \n","                                                                 \n"," dense (Dense)               (None, 1)                 51201     \n","                                                                 \n","=================================================================\n","Total params: 20,912,681\n","Trainable params: 20,858,153\n","Non-trainable params: 54,528\n","_________________________________________________________________\n","Epoch 1/5\n","291/291 [==============================] - 91s 288ms/step - loss: 0.3558 - accuracy: 0.8844 - val_loss: 0.1683 - val_accuracy: 0.9463\n","Epoch 2/5\n","291/291 [==============================] - 81s 279ms/step - loss: 0.1471 - accuracy: 0.9443 - val_loss: 0.1895 - val_accuracy: 0.9321\n","Epoch 3/5\n","291/291 [==============================] - 81s 279ms/step - loss: 0.0954 - accuracy: 0.9665 - val_loss: 0.1811 - val_accuracy: 0.9566\n","Epoch 4/5\n","291/291 [==============================] - 81s 279ms/step - loss: 0.0685 - accuracy: 0.9736 - val_loss: 0.1486 - val_accuracy: 0.9544\n","Epoch 5/5\n","291/291 [==============================] - 81s 280ms/step - loss: 0.0660 - accuracy: 0.9772 - val_loss: 0.0908 - val_accuracy: 0.9721\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f89cd90a190>"]},"metadata":{},"execution_count":11}],"source":["# 가져온 모델 훈련 가능하도록 설정\n","base_model.trainable = True\n","\n","# 훈련 가능한 파라미터 수를 위와 비교해보세요.\n","model.summary()\n","\n","# 컴파일 해주세요.\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=[\"accuracy\"]) \n","\n","# 방금 훈련한 모델을 조금 더 훈련시킵니다.\n","epochs = 5\n","model.fit(train_ds, epochs=epochs, validation_data=validation_ds)"]},{"cell_type":"markdown","metadata":{"id":"1x3KXtZY7QcL"},"source":["## 다시 테스트 데이터로 평가해보기"]},{"cell_type":"code","source":["model.evaluate(test_ds)"],"metadata":{"id":"Phq2K78YL9E6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649405223296,"user_tz":-540,"elapsed":5495,"user":{"displayName":"조현민","userId":"13701119480392953941"}},"outputId":"6feb31bf-d55a-4865-c7cd-ed9462e366bc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["73/73 [==============================] - 4s 59ms/step - loss: 0.1098 - accuracy: 0.9635\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.10983318090438843, 0.9634565711021423]"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["시간이 오래걸려 각 단계에서 epochs을 크게 줄였기 때문에 오히려 성능이 떨어질 가능성이 높습니다.<br>\n","원본에서는 훈련 불가능하게 만든 상태에서 20 epochs, 세부 튜닝에서 10 epochs 훈련하는데 성능이 조금 좋아집니다.<br>\n","전이학습에서 세부 튜닝하는 방법까지 공부한 것에 의미를 가집시다."],"metadata":{"id":"TYMX7_kXMETZ"}}],"metadata":{"colab":{"collapsed_sections":[],"name":"KW_DLLAB_2022_06_Transfer_Learning_조현민_.ipynb.ipynb의 사본","provenance":[{"file_id":"1C93wfhxSGZ2Eux2GPGTLlzn1uhcPrw5Q","timestamp":1649398271422},{"file_id":"1u9fRCvTPZJc-g2Lu_3oMozqkOQZwyEwa","timestamp":1649250419614},{"file_id":"https://github.com/keras-team/keras-io/blob/master/guides/ipynb/transfer_learning.ipynb","timestamp":1649249435073}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}