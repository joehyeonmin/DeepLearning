{"cells":[{"cell_type":"markdown","metadata":{"id":"loZ63Om16QA8"},"source":["NumPy - 대규모의 다차원 배열을 쉽게 처리할 때 사용하는 파이썬 라이브러리<br>\n","*** 한 문제씩 실행되도록 \"\"\"를 이용한 주석을 사용했으니 \"\"\"를 뒤로 이동해가며 모든 문제를 해결하세요. ***\n","\n","## 내용\n","1. 배열 초기화\n","2. 데이터 읽기 및 수정\n","3. 데이터 주무르기 \n","4. Combining data\n","5. Math operations\n","\n","출처: Introduction to Deep Learning at Carnegie Mellon University (https://deeplearning.cs.cmu.edu/S22/index.html)"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"wTW-VKUc7wDn","executionInfo":{"status":"ok","timestamp":1647584865111,"user_tz":-540,"elapsed":5,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["# Import the NumPy \n","import numpy as np\n","\n","# 랜덤 시드 설정: 난수를 사용해도 실행할 때마다 동일한 결과를 얻기 위함\n","np.random.seed(0)"]},{"cell_type":"markdown","metadata":{"id":"pe99Qb1M8LJ6"},"source":["# 1. 배열 초기화\n"]},{"cell_type":"markdown","metadata":{"id":"f0Hznd64893f"},"source":["새로운 넘파이 배열 만들기"]},{"cell_type":"markdown","metadata":{"id":"mRG9AhXkXXAJ"},"source":["## a. 비어 있는 (초기화 안된) / 0으로 채워진 / 1로 채워진 배열 만들기\n","\n","\n","1. numpy.empty (https://numpy.org/doc/stable/reference/generated/numpy.empty.html)\n","2. numpy.zeros (https://numpy.org/doc/stable/reference/generated/numpy.zeros.html#numpy.zeros)\n","3. numpy.ones (https://numpy.org/doc/stable/reference/generated/numpy.ones.html#numpy.ones)\n","4. numpy.full (https://numpy.org/doc/stable/reference/generated/numpy.full.html#numpy.full)\n","5. numpy.zeros_like (https://numpy.org/doc/stable/reference/generated/numpy.zeros_like.html#numpy.zeros_like)\n","6. numpy.ones_like (https://numpy.org/doc/stable/reference/generated/numpy.ones_like.html#numpy.ones_like)\n","7. numpy.full_like (https://numpy.org/doc/stable/reference/generated/numpy.full_like.html#numpy.full_like)\n"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"hxa3gpMk8K0E","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647585202841,"user_tz":-540,"elapsed":1146,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"8df2cef2-5168-4f18-d567-7550e0e87130"},"outputs":[{"output_type":"stream","name":"stdout","text":["An empty array is \n"," [[5.e-324 5.e-324]\n"," [5.e-324 0.e+000]]  with dimensions  (2, 2) \n","\n","A zeros array is \n"," [[0. 0. 0.]\n"," [0. 0. 0.]]  with dimensions  (2, 3) \n","\n","A ones array is \n"," [[1. 1.]\n"," [1. 1.]\n"," [1. 1.]\n"," [1. 1.]]  with dimensions  (4, 2) \n","\n","A filled array is \n"," [[10 10]\n"," [10 10]]  with dimensions  (2, 2) \n","\n","A zero like array is \n"," [[0. 0.]\n"," [0. 0.]\n"," [0. 0.]\n"," [0. 0.]]  with dimensions  (4, 2) \n","\n","A ones like array is \n"," [[1. 1. 1.]\n"," [1. 1. 1.]]  with dimensions  (2, 3) \n","\n","A full like array is \n"," [[0.1 0.1 0.1]\n"," [0.1 0.1 0.1]]  with dimensions  (2, 3) \n","\n"]}],"source":["# 2 x 2 크기로 초기화 안된 빈 배열 만들기\n","# 장점? A: 배열 값을 0으로 설정하지 않으므로 약간 더 빠를 수 있습니다.\n","# 단점? A:사용자가 배열의 모든 값을 수동으로 설정해야 하므로 주의해서 사용해야 합니다\n","# 힌트: API 문서의 Notes\n","empty_arr = np.empty((2,2))\n","print(\"An empty array is \\n\", empty_arr, \" with dimensions \", empty_arr.shape, \"\\n\")\n","\n","# 모두 0으로 채워진 2 x 3 배열 만들기\n","zeros_arr =  np.zeros((2, 3))\n","print(\"A zeros array is \\n\", zeros_arr, \" with dimensions \", zeros_arr.shape, \"\\n\")\n","\n","# 모두 1로 채워진 4 x 2 배열 만들기\n","ones_arr = np.ones((4, 2))\n","print(\"A ones array is \\n\", ones_arr, \" with dimensions \", ones_arr.shape, \"\\n\")\n","\n","# 모두 10으로 채워진 2 x 2 배열 만들기\n","tens_arr = np.full((2, 2), 10)\n","print(\"A filled array is \\n\", tens_arr, \" with dimensions \", tens_arr.shape, \"\\n\")\n","\n","# 주어진 배열과 동일한 모양에 0으로 채워진 배열 만들기\n","zeros_like_arr = np.zeros_like(ones_arr)\n","print(\"A zero like array is \\n\", zeros_like_arr, \" with dimensions \", zeros_like_arr.shape, \"\\n\")\n","\n","# 주어진 배열과 동일한 모양에 1로 채워진 배열 만들기\n","ones_like_arr = np.ones_like(zeros_arr)\n","print(\"A ones like array is \\n\", ones_like_arr, \" with dimensions \", ones_like_arr.shape, \"\\n\")\n","\n","# 주어진 배열과 동일한 모양에 0.1로 채워진 배열 만들기\n","full_like_arr = np.full_like(zeros_arr, 0.1)\n","print(\"A full like array is \\n\", full_like_arr, \" with dimensions \", full_like_arr.shape, \"\\n\")\n"]},{"cell_type":"markdown","metadata":{"id":"lfeuBVaoXhTa"},"source":["## b. 기존의 데이터로 배열 만들기\n","1. numpy.array (https://numpy.org/doc/stable/reference/generated/numpy.array.html)\n","2. numpy.loadtxt (https://numpy.org/doc/stable/reference/generated/numpy.loadtxt.html)\n","3. numpy.load (https://numpy.org/doc/stable/reference/generated/numpy.load.html)"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"SmfEOOQV9KhT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647585269139,"user_tz":-540,"elapsed":421,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"9a6202dc-b157-49e0-f9d6-0e44a03cf2b9"},"outputs":[{"output_type":"stream","name":"stdout","text":["An array from given list is \n"," [1 2 3 4]  with dimensions  (4,) \n","\n"]}],"source":["# 리스트로 배열 만들기\n","new_list = [1, 2, 3, 4]\n","arr_from_list = np.array(new_list)\n","print(\"An array from given list is \\n\", arr_from_list, \" with dimensions \", arr_from_list.shape, \"\\n\")"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"ZA-iWT7j9Ka0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647585383298,"user_tz":-540,"elapsed":318,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"62a66aba-32fb-4564-eae1-78127613605e"},"outputs":[{"output_type":"stream","name":"stdout","text":["txt 파일에서 읽어온 배열\n"," [[0. 1.]\n"," [2. 3.]]\n","\n","a.npy 파일에서 읽어온 배열\n"," [[0. 1.]\n"," [2. 3.]]\n"]}],"source":["from io import StringIO\n","\n","# c는 \"0 1\\n2 3\"이 쓰여진 텍스트파일로 취급됨\n","c = StringIO(\"0 1\\n2 3\")  \n","\n","# txt 파일에서 읽어오기\n","txt_arr = np.loadtxt(c)\n","print(\"txt 파일에서 읽어온 배열\\n\", txt_arr)\n","\n","\n","# txt_arr을 a.npy 파일로 저장\n","np.save('a.npy', txt_arr)\n","\n","# a.npy에서 'a.npy' 읽어오기\n","loaded_arr = np.load('./a.npy')\n","print(\"\\na.npy 파일에서 읽어온 배열\\n\", loaded_arr)\n"]},{"cell_type":"markdown","metadata":{"id":"F4sTWi44Ybo8"},"source":["## c. 주어진 숫자 범위에서 만들기\n","1. numpy.arange (https://numpy.org/doc/stable/reference/generated/numpy.arange.html)\n","2. numpy.linspace (https://numpy.org/doc/stable/reference/generated/numpy.linspace.html)"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"0nm-SFyi9c5V","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647585505716,"user_tz":-540,"elapsed":290,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"243b46b4-077f-49d9-837d-437ac18400e5"},"outputs":[{"output_type":"stream","name":"stdout","text":["An array given range is \n"," [0 1 2 3 4 5 6 7 8]  with dimensions  (9,) \n","\n","An evenly spaced array given range is \n"," [2.  2.2 2.4 2.6 2.8]  with dimensions  (5,) \n","\n"]}],"source":["# 0부터 9까지\n","range_arr = np.arange(9)\n","print(\"An array given range is \\n\", range_arr, \" with dimensions \", range_arr.shape, \"\\n\")\n","\n","\n","# 2부터 3까지 [2, 3) 다섯 개 동일 간격 숫자로 (2는 포함, 3은 미포함)\n","linspace_arr = np.linspace(2.0, 3.0, num=5, endpoint=False)\n","print(\"An evenly spaced array given range is \\n\", linspace_arr, \" with dimensions \", linspace_arr.shape, \"\\n\")\n"]},{"cell_type":"markdown","metadata":{"id":"PRZ68lJcYxg6"},"source":["## d. 무작위 값으로 채운 배열 만들기\n","\n","1. numpy.random.rand (https://numpy.org/doc/stable/reference/random/generated/numpy.random.rand.html)\n","2. numpy.random.randint (https://numpy.org/doc/stable/reference/random/generated/numpy.random.randint.html)\n","3. numpy.random.randn (https://numpy.org/doc/stable/reference/random/generated/numpy.random.randn.html)"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"HWqRwu4e9vqA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647585643249,"user_tz":-540,"elapsed":12,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"05da582f-694d-46b5-931b-939961455711"},"outputs":[{"output_type":"stream","name":"stdout","text":["A random array from a uniform distribution is \n"," [[0.43758721 0.891773  ]\n"," [0.96366276 0.38344152]\n"," [0.79172504 0.52889492]]  with dimensions  (3, 2) \n","\n","A random integer array from a range is \n"," [[0 1 1 0]\n"," [1 4 3 0]]  with dimensions  (2, 4) \n","\n","A random array from a gaussian distribution is \n"," [[4.21078039 4.4478512  2.54604357 6.52551158]\n"," [2.06382077 3.68799579 0.59811347 3.94231744]]\n","with mu:  3\n","with sigma:  2.5\n","with dimensions  (2, 4)\n"]}],"source":["# [0, 1)에서 추출한 무작위 실수로 3 x 2 배열 만들기\n","uniform_rand_arr = np.random.rand(3,2)\n","print(\"A random array from a uniform distribution is \\n\", uniform_rand_arr, \" with dimensions \", uniform_rand_arr.shape, \"\\n\")\n","\n","\n","# [0, 5)에서 추출한 무작위 정수로 2 x 4 배열 만들기\n","range_rand_int_arr =  np.random.randint(5, size=(2, 4))\n","print(\"A random integer array from a range is \\n\", range_rand_int_arr, \" with dimensions \", range_rand_int_arr.shape, \"\\n\")\n","\n","# 정규분포 N(mu, sigma^2)에서 추출한 무작위 실수로 배열 만들 때:\n","# mu + sigma * np.random.randn(...) \n","\n","# 평균: 3, 표준편차: 2.5인 정규분포에서 추출한 무작위 실수로 2 x 4 배열 만들기 \n","mu = 3\n","sigma =2.5\n","sample_normal_arr = mu + sigma * np.random.randn(2, 4)\n","print(\"A random array from a gaussian distribution is \\n\", sample_normal_arr)\n","print(\"with mu: \", mu)\n","print(\"with sigma: \", sigma)\n","print(\"with dimensions \", sample_normal_arr.shape)\n"]},{"cell_type":"markdown","metadata":{"id":"Tsyba3mo-2xd"},"source":["# 2. 데이터 읽기 및 수정"]},{"cell_type":"markdown","metadata":{"id":"NN2IKIjC5kU9"},"source":["## a. 인덱싱: NumPy 배열에서 값 읽어오기"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"oBZkqksi5icN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647585651726,"user_tz":-540,"elapsed":296,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"ca92c34a-eaf4-4543-dbe4-aed544d7f72b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[[0.94466892, 0.52184832, 0.41466194, 0.26455561, 0.77423369,\n","         0.45615033],\n","        [0.56843395, 0.0187898 , 0.6176355 , 0.61209572, 0.616934  ,\n","         0.94374808],\n","        [0.6818203 , 0.3595079 , 0.43703195, 0.6976312 , 0.06022547,\n","         0.66676672],\n","        [0.67063787, 0.21038256, 0.1289263 , 0.31542835, 0.36371077,\n","         0.57019677],\n","        [0.43860151, 0.98837384, 0.10204481, 0.20887676, 0.16130952,\n","         0.65310833]],\n","\n","       [[0.2532916 , 0.46631077, 0.24442559, 0.15896958, 0.11037514,\n","         0.65632959],\n","        [0.13818295, 0.19658236, 0.36872517, 0.82099323, 0.09710128,\n","         0.83794491],\n","        [0.09609841, 0.97645947, 0.4686512 , 0.97676109, 0.60484552,\n","         0.73926358],\n","        [0.03918779, 0.28280696, 0.12019656, 0.2961402 , 0.11872772,\n","         0.31798318],\n","        [0.41426299, 0.0641475 , 0.69247212, 0.56660145, 0.26538949,\n","         0.52324805]],\n","\n","       [[0.09394051, 0.5759465 , 0.9292962 , 0.31856895, 0.66741038,\n","         0.13179786],\n","        [0.7163272 , 0.28940609, 0.18319136, 0.58651293, 0.02010755,\n","         0.82894003],\n","        [0.00469548, 0.67781654, 0.27000797, 0.73519402, 0.96218855,\n","         0.24875314],\n","        [0.57615733, 0.59204193, 0.57225191, 0.22308163, 0.95274901,\n","         0.44712538],\n","        [0.84640867, 0.69947928, 0.29743695, 0.81379782, 0.39650574,\n","         0.8811032 ]],\n","\n","       [[0.58127287, 0.88173536, 0.69253159, 0.72525428, 0.50132438,\n","         0.95608363],\n","        [0.6439902 , 0.42385505, 0.60639321, 0.0191932 , 0.30157482,\n","         0.66017354],\n","        [0.29007761, 0.61801543, 0.4287687 , 0.13547406, 0.29828233,\n","         0.56996491],\n","        [0.59087276, 0.57432525, 0.65320082, 0.65210327, 0.43141844,\n","         0.8965466 ],\n","        [0.36756187, 0.43586493, 0.89192336, 0.80619399, 0.70388858,\n","         0.10022689]]])"]},"metadata":{},"execution_count":17}],"source":["# 무작위 값으로 채워진 4 x 5 x 6 배열을 만들어보세요. (5 x 6 행렬이 4개 있는 것으로 해석할 수 있음)\n","# MNIST에서 train_images.shape의 결과 (60000, 28, 28)는 28 x 28 그림이 60,000장 있다는 것을 의미했음\n","# (묶음, 행, 열)로 해석할 수 있음\n","n = np.random.rand(4, 5, 6)\n","n"]},{"cell_type":"code","execution_count":23,"metadata":{"id":"1KyiwoIHFltJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647585754282,"user_tz":-540,"elapsed":2,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"6f5ef0a0-3f7c-4688-c57b-60e6c597add0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9767610881903371"]},"metadata":{},"execution_count":23}],"source":["# n에서 두 번째 묶음의 세 번째 행, 네 번째 열의 값은? 인덱스는 0에서 시작\n","n[1][2][3]"]},{"cell_type":"markdown","metadata":{"id":"5_3UUm7sCJqK"},"source":["## b. 슬라이싱: NumPy 배열의 일부를 가져오기\n","\n","시작(포함):끝(미포함)으로 연속된 항목을 슬라이싱 <br>\n",":만 쓰면 전체"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"pQh3PPGpCZ3g","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647585714548,"user_tz":-540,"elapsed":291,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"3d29f101-de48-45b3-d734-4f1c5419d369"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.94466892 0.52184832 0.41466194 0.26455561 0.77423369 0.45615033]\n"," [0.56843395 0.0187898  0.6176355  0.61209572 0.616934   0.94374808]\n"," [0.6818203  0.3595079  0.43703195 0.6976312  0.06022547 0.66676672]\n"," [0.67063787 0.21038256 0.1289263  0.31542835 0.36371077 0.57019677]\n"," [0.43860151 0.98837384 0.10204481 0.20887676 0.16130952 0.65310833]]\n"]}],"source":["# 첫 번째 묶음의 모든 행렬 가져오기\n","print(n[0, :, :]) # same as: n[0], 정답이므로 수정할 필요 없음"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"Rr58Qx0MWt0C","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647585756133,"user_tz":-540,"elapsed":5,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"7260a03b-f2d9-42e5-ac07-73ce22da551e"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.94466892 0.52184832 0.41466194 0.26455561]\n"," [0.56843395 0.0187898  0.6176355  0.61209572]\n"," [0.6818203  0.3595079  0.43703195 0.6976312 ]]\n"]}],"source":["# 첫 번째 묶음에서 [0, 3) 행, [0, 4) 열 가져오기, 즉 3 x 4 배열이 나와야 함\n","print(n[0,:3 ,:4 ])"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"_E-9XB0hSi9h","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647585783172,"user_tz":-540,"elapsed":294,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"4fb8b65c-d314-4132-fb99-a7770399e066"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[[0.36371077]]\n","\n"," [[0.11872772]]\n","\n"," [[0.95274901]]\n","\n"," [[0.43141844]]]\n"]}],"source":["# 전체 묶음에서 4번 째 행, 5번째 열 값들 가져오기\n","print(n[:, 3:4, 4:5]) "]},{"cell_type":"markdown","metadata":{"id":"z4kunElTPZOp"},"source":["### Slicing at Interval\n","시작::증가폭으로 띄엄띄엄 슬라이싱<br>\n","예) a[7::2]인 경우 a[7], a[9], a[11], ... 을 가져와서 배열로 만듦"]},{"cell_type":"code","execution_count":26,"metadata":{"id":"cPnvdl1ZPLzJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647585875618,"user_tz":-540,"elapsed":305,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"48373bcb-07d5-4419-ef36-617958de13f8"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[[0.94466892 0.52184832 0.41466194 0.26455561 0.77423369 0.45615033]\n","  [0.56843395 0.0187898  0.6176355  0.61209572 0.616934   0.94374808]\n","  [0.6818203  0.3595079  0.43703195 0.6976312  0.06022547 0.66676672]\n","  [0.67063787 0.21038256 0.1289263  0.31542835 0.36371077 0.57019677]\n","  [0.43860151 0.98837384 0.10204481 0.20887676 0.16130952 0.65310833]]\n","\n"," [[0.09394051 0.5759465  0.9292962  0.31856895 0.66741038 0.13179786]\n","  [0.7163272  0.28940609 0.18319136 0.58651293 0.02010755 0.82894003]\n","  [0.00469548 0.67781654 0.27000797 0.73519402 0.96218855 0.24875314]\n","  [0.57615733 0.59204193 0.57225191 0.22308163 0.95274901 0.44712538]\n","  [0.84640867 0.69947928 0.29743695 0.81379782 0.39650574 0.8811032 ]]]\n"]}],"source":["print(n[0::2]) # 0번 묶음, 2번 묶음, 4번 묶음, ... 슬라이싱 (n은 3번 묶음까지만 있어서 두 개의 묶음만 출력됨)"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"dSyHxIdJP_Vj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647585883887,"user_tz":-540,"elapsed":315,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"645ef929-176a-4b07-fe32-f395dfe2971e"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[[0.0187898  0.61209572 0.94374808]\n","  [0.3595079  0.6976312  0.66676672]\n","  [0.21038256 0.31542835 0.57019677]]\n","\n"," [[0.28940609 0.58651293 0.82894003]\n","  [0.67781654 0.73519402 0.24875314]\n","  [0.59204193 0.22308163 0.44712538]]]\n"]}],"source":["print(n[0::2, 1:4, 1::2]) # 원래 n의 모습과 비교해가며 어떻게 만들어진 것인지 이해하고 넘어가세요."]},{"cell_type":"markdown","metadata":{"id":"HfrNmXUPCac7"},"source":["## c. NumPy 배열 수정하기"]},{"cell_type":"code","execution_count":28,"metadata":{"id":"vDw0M4qLCmmO","executionInfo":{"status":"ok","timestamp":1647585928567,"user_tz":-540,"elapsed":316,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["# 배열 복사하기\n","n_copy = np.copy(n)"]},{"cell_type":"markdown","metadata":{"id":"bhPKGV0_ChxG"},"source":["### 하나의 값 수정하기"]},{"cell_type":"code","execution_count":37,"metadata":{"id":"0WoT4FviDj7V","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647586221379,"user_tz":-540,"elapsed":287,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"7122a27c-0cbc-41ec-8e55-a500012262ba"},"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","True\n","0.001\n","0.001\n","0.005\n"]}],"source":["# 복사한 배열과 n이 같은지 항목 하나로 확인\n","print(n_copy[2, 4, 1] == n[2, 4, 1])\n","\n","# 복사한 배열 n_copy[2, 4, 1]의 값을 0.005로 변경\n","n_copy[2, 4, 1] = 0.005\n","\n","# 여전히 내용이 같은지 확인\n","print(n_copy[2, 4, 1] == n[2, 4, 1])\n","\n","# n_copy는 n을 복사한 것이지만 n과 다른 위치에 독립적으로 존재한다.\n","# 만약 copy 함수로 복사하지 않고 m = n으로 m을 만든다음\n","# m[2, 4, 1] 값을 수정하면 어떻게 될까? \n","# A: n의 인덱스 값도 바뀐다.\n","m = n\n","m[2, 4, 1] = 0.001\n","print(m[2,4,1])\n","print(n[2,4,1])\n","print(n_copy[2,4,1])\n"]},{"cell_type":"code","execution_count":38,"metadata":{"id":"tMdjXJpzbJvY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647586243834,"user_tz":-540,"elapsed":427,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"bd43cd32-6ac7-456d-e3a4-da4c19911846"},"outputs":[{"output_type":"stream","name":"stdout","text":["0.001\n","0.005\n"]}],"source":["print(n[2,4,1])\n","print(n_copy[2, 4, 1])"]},{"cell_type":"markdown","metadata":{"id":"gg8WVOaxCoIH"},"source":["### 여러 항목의 값을 같은 값으로 수정하기"]},{"cell_type":"code","execution_count":39,"metadata":{"id":"VgHHOWIzFYI2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647586256606,"user_tz":-540,"elapsed":322,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"7d09b6be-73d9-4504-cb34-02a07201a7f1"},"outputs":[{"output_type":"stream","name":"stdout","text":["[0.57615733 0.59204193 0.57225191 0.22308163 0.95274901 0.44712538]\n","[0.5 0.5 0.5 0.5 0.5 0.5]\n"]}],"source":["n_copy = np.copy(n)\n","\n","# n_copy 3번째 묶음의 4번째 열의 값 확인\n","print(n_copy[2, 3])\n","\n","# n_copy 3번째 묶음, 4번째 열의 값을 모두 0.5로 바꾸기\n","n_copy[2, 3] = 0.5\n","\n","# n_copy 3번째 묶음의 4번째 열의 값 확인\n","print(n_copy[2, 3])"]},{"cell_type":"markdown","metadata":{"id":"CTJmCIlu-6jO"},"source":["# 3.데이터 주무르기"]},{"cell_type":"markdown","metadata":{"id":"qbaHAEkI0L2u"},"source":["## a. Reshaping Arrays (배열 모양 다르게 해석하기)\n","Array reshaping은 배열안의 데이터는 그대로 두고 모양을 바꿔 해석을 다르게 하는 것입니다.\n","\n","예를 들어 (4,) 모양의 배열 [1, 2, 3, 4]는 (2, 2) 모양의 배열 [[1, 2], [3, 4]] 및 <br> (1, 4) 모양의 배열 [[1, 2, 3, 4]]로 모양을 바꿔 해석할 수도 있습니다."]},{"cell_type":"markdown","metadata":{"id":"1dTwTABxDjOb"},"source":["#### 동일 차원으로 reshaping"]},{"cell_type":"code","execution_count":40,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3HRpSRrCDqPS","outputId":"651ddc76-1683-43e9-81e2-6242e182257c","executionInfo":{"status":"ok","timestamp":1647586276747,"user_tz":-540,"elapsed":284,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["원래 모양: (3, 4, 5)\n"]}],"source":["s = np.random.rand(3, 4, 5)\n","print(f\"원래 모양: {s.shape}\")"]},{"cell_type":"code","execution_count":41,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hioOa19Nb_2P","outputId":"89c289bf-d928-4e29-ed27-51e214eb7879","executionInfo":{"status":"ok","timestamp":1647586277511,"user_tz":-540,"elapsed":460,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["60"]},"metadata":{},"execution_count":41}],"source":["# 전체 원소 개수\n","# Q: 어떻게 계산가능할까요?\n","# A: size 함수를 통해 계산가능하다.\n","s.size"]},{"cell_type":"code","execution_count":42,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nR56niCdcQrG","outputId":"2518951b-eb76-4812-f3b7-ed9ac17b179f","executionInfo":{"status":"ok","timestamp":1647586277512,"user_tz":-540,"elapsed":13,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["[[[0.91948261 0.7142413  0.99884701 0.1494483  0.86812606]\n","  [0.16249293 0.61555956 0.12381998 0.84800823 0.80731896]\n","  [0.56910074 0.4071833  0.069167   0.69742877 0.45354268]\n","  [0.7220556  0.86638233 0.97552151 0.85580334 0.01171408]]\n","\n"," [[0.35997806 0.72999056 0.17162968 0.52103661 0.05433799]\n","  [0.19999652 0.01852179 0.7936977  0.22392469 0.34535168]\n","  [0.92808129 0.7044144  0.03183893 0.16469416 0.6214784 ]\n","  [0.57722859 0.23789282 0.934214   0.61396596 0.5356328 ]]\n","\n"," [[0.58990998 0.73012203 0.311945   0.39822106 0.20984375]\n","  [0.18619301 0.94437239 0.7395508  0.49045881 0.22741463]\n","  [0.25435648 0.05802916 0.43441663 0.31179588 0.69634349]\n","  [0.37775184 0.17960368 0.02467873 0.06724963 0.67939277]]]\n"]}],"source":["# s 내용 확인하기\n","print(s)"]},{"cell_type":"code","execution_count":44,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0hClk9ebHgMU","outputId":"15e61d00-5e0b-4a33-be6f-a1186dfbbe96","executionInfo":{"status":"ok","timestamp":1647586445880,"user_tz":-540,"elapsed":295,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["s1의 모양: (2, 6, 5)\n"]}],"source":["# s를 (2, 6, 5)로 reshape하여 s1에 저장하기\n","s1 = s.reshape(2, 6,5)\n","print(f\"s1의 모양: {s1.shape}\")"]},{"cell_type":"code","execution_count":45,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"URYrMZr0cc7q","outputId":"65f76461-b0fb-46e6-9f80-54b5509af466","executionInfo":{"status":"ok","timestamp":1647586449781,"user_tz":-540,"elapsed":299,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["[[[0.91948261 0.7142413  0.99884701 0.1494483  0.86812606]\n","  [0.16249293 0.61555956 0.12381998 0.84800823 0.80731896]\n","  [0.56910074 0.4071833  0.069167   0.69742877 0.45354268]\n","  [0.7220556  0.86638233 0.97552151 0.85580334 0.01171408]\n","  [0.35997806 0.72999056 0.17162968 0.52103661 0.05433799]\n","  [0.19999652 0.01852179 0.7936977  0.22392469 0.34535168]]\n","\n"," [[0.92808129 0.7044144  0.03183893 0.16469416 0.6214784 ]\n","  [0.57722859 0.23789282 0.934214   0.61396596 0.5356328 ]\n","  [0.58990998 0.73012203 0.311945   0.39822106 0.20984375]\n","  [0.18619301 0.94437239 0.7395508  0.49045881 0.22741463]\n","  [0.25435648 0.05802916 0.43441663 0.31179588 0.69634349]\n","  [0.37775184 0.17960368 0.02467873 0.06724963 0.67939277]]]\n"]}],"source":["# s와 s1의 각 원소값과 위치는 동일한 것을 확인해보세요.\n","print(s1)"]},{"cell_type":"markdown","metadata":{"id":"NqgGF9dcDZQO"},"source":["### 다른 차원으로 reshaping"]},{"cell_type":"code","execution_count":50,"metadata":{"id":"MKckDfOOAXji","executionInfo":{"status":"ok","timestamp":1647586599928,"user_tz":-540,"elapsed":286,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["# 0부터 119까지 120개의 정수로 이루어진 배열을 간단하게 만들어보세요.\n","r = np.arange(120)"]},{"cell_type":"code","execution_count":47,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vkv3TnnjC1D2","outputId":"b865b759-0133-45c3-8e57-fcc65f83a9e7","executionInfo":{"status":"ok","timestamp":1647586564974,"user_tz":-540,"elapsed":8,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["원래 모양: (119,)\n"]}],"source":["print(f\"원래 모양: {r.shape}\")"]},{"cell_type":"code","execution_count":48,"metadata":{"id":"k1L6BOSXc2o5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647586567495,"user_tz":-540,"elapsed":300,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"ccd241c9-0c6c-4745-ff1e-af89a3513b73"},"outputs":[{"output_type":"stream","name":"stdout","text":["[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n","  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35\n","  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53\n","  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71\n","  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89\n","  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107\n"," 108 109 110 111 112 113 114 115 116 117 118]\n"]}],"source":["print(r)"]},{"cell_type":"code","execution_count":51,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w4u53ymMDBHr","outputId":"686d8fca-769b-4683-e4aa-ff6c599560c1","executionInfo":{"status":"ok","timestamp":1647586601673,"user_tz":-540,"elapsed":297,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["r1의 모양: (3, 4, 10)\n"]}],"source":["# (120,) -> (3, 4, 10)\n","# 원소개수는 120개로 동일합니다.\n","r1 = r.reshape(3,4,10)\n","print(f\"r1의 모양: {r1.shape}\")"]},{"cell_type":"code","execution_count":52,"metadata":{"id":"RWpI9eVXdL6i","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647586605140,"user_tz":-540,"elapsed":310,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"fc308936-ef8e-4fed-fc09-4f6b7ec2f1d9"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[[  0   1   2   3   4   5   6   7   8   9]\n","  [ 10  11  12  13  14  15  16  17  18  19]\n","  [ 20  21  22  23  24  25  26  27  28  29]\n","  [ 30  31  32  33  34  35  36  37  38  39]]\n","\n"," [[ 40  41  42  43  44  45  46  47  48  49]\n","  [ 50  51  52  53  54  55  56  57  58  59]\n","  [ 60  61  62  63  64  65  66  67  68  69]\n","  [ 70  71  72  73  74  75  76  77  78  79]]\n","\n"," [[ 80  81  82  83  84  85  86  87  88  89]\n","  [ 90  91  92  93  94  95  96  97  98  99]\n","  [100 101 102 103 104 105 106 107 108 109]\n","  [110 111 112 113 114 115 116 117 118 119]]]\n"]}],"source":["# r과 r1을 비교해보세요.\n","print(r1)"]},{"cell_type":"code","execution_count":53,"metadata":{"id":"5CiMlVDEER6T","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647586617907,"user_tz":-540,"elapsed":307,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"06726fde-a85b-4bc1-ad46-70c4b68f3993"},"outputs":[{"output_type":"stream","name":"stdout","text":["r2의 모양: (6, 20)\n"]}],"source":["# r1을 reshape하여 r2에 저장하세요.\n","# (3, 4, 10) -> (6, 20)\n","r2 = r1.reshape(6,20)\n","print(f\"r2의 모양: {r2.shape}\")"]},{"cell_type":"code","execution_count":54,"metadata":{"id":"1BJPHamudbEC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647586619610,"user_tz":-540,"elapsed":289,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"e3af451e-a676-4001-aac5-0263940beb24"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n","   18  19]\n"," [ 20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37\n","   38  39]\n"," [ 40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57\n","   58  59]\n"," [ 60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77\n","   78  79]\n"," [ 80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97\n","   98  99]\n"," [100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117\n","  118 119]]\n"]}],"source":["# r2와 r1, r을 비교해보세요.\n","print(r2)"]},{"cell_type":"markdown","source":["수고하셨습니다. "],"metadata":{"id":"VlpLO5jLJTgo"}},{"cell_type":"markdown","source":["아래의 셀부터는 수업 시간에 실습하지 않으셔도 됩니다."],"metadata":{"id":"2thINny2JiY5"}},{"cell_type":"markdown","source":["바닥부터 딥 러닝 모델을 직접 만들거나 PyTorch를 사용할 예정이면 공부하시는 것이 좋습니다."],"metadata":{"id":"u_thZpTpJ8Bf"}},{"cell_type":"markdown","metadata":{"id":"-VvoSc0H0AY-"},"source":["## b. 행과 열 바꾸기 (전치)\n","The transpose operation reverses the order of an array. It switches the rows to columns and vice versa. In a multi-dimensional array, the transpose operation moves the data from one axis to another in the order specified in the transpose method."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_tA8FZ7e0JDG","executionInfo":{"status":"aborted","timestamp":1647586277514,"user_tz":-540,"elapsed":11,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["# 아래 주석과 같은 결과가 나오도록 만들어보세요.\n","w = np.arange().reshape((, ,))\n","w\n","\n","# 아래 주석은 실습용 코드가 아닙니다.\n","\"\"\"\n","array([[[ 0,  1,  2,  3,  4,  5],\n","        [ 6,  7,  8,  9, 10, 11],\n","        [12, 13, 14, 15, 16, 17],\n","        [18, 19, 20, 21, 22, 23],\n","        [24, 25, 26, 27, 28, 29]],\n","\n","       [[30, 31, 32, 33, 34, 35],\n","        [36, 37, 38, 39, 40, 41],\n","        [42, 43, 44, 45, 46, 47],\n","        [48, 49, 50, 51, 52, 53],\n","        [54, 55, 56, 57, 58, 59]],\n","\n","       [[60, 61, 62, 63, 64, 65],\n","        [66, 67, 68, 69, 70, 71],\n","        [72, 73, 74, 75, 76, 77],\n","        [78, 79, 80, 81, 82, 83],\n","        [84, 85, 86, 87, 88, 89]]])\n","\"\"\""]},{"cell_type":"markdown","metadata":{"id":"Lkfwv2HrK5xl"},"source":["#### 그냥 전치하기"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9ziuTtSRKIzS","executionInfo":{"status":"aborted","timestamp":1647586277514,"user_tz":-540,"elapsed":11,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["# w와 비교해보세요.\n","# (3, 5, 6) -> (6, 5, 3)\n","\n","# w[1][2][3]은 w1의 무엇과 동일할까요?\n","# A: w1[][][]\n","\n","w1 = np.transpose(w)\n","w1"]},{"cell_type":"markdown","metadata":{"id":"l_wJ3i7sLEuQ"},"source":["#### 전치할 때 축 지정하기"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LakyyLPVLJDg","executionInfo":{"status":"aborted","timestamp":1647586277515,"user_tz":-540,"elapsed":12,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["# 원래 0, 1, 2인데 각 묶음은 그대로 두고 묶음 내에서 행과 열을 전치\n","# (3, 5, 6) -> (3, 6, 5)\n","# w와 w2를 비교해보세요.\n","w2 = np.transpose(w, axes=(0, 2, 1)) \n","w2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Hvw9jUvBLcl5","executionInfo":{"status":"aborted","timestamp":1647586277515,"user_tz":-540,"elapsed":12,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["# (3, 5, 6) -> (5, 6, 3)\n","# 아래 주석과 같은 결과가 나오도록 만들어보세요.\n","w3 = np.transpose(w, axes=(, ,))\n","w3\n","\n","# 아래 주석은 실습용 코드가 아닙니다.\n","\"\"\"\n","array([[[ 0, 30, 60],\n","        [ 1, 31, 61],\n","        [ 2, 32, 62],\n","        [ 3, 33, 63],\n","        [ 4, 34, 64],\n","        [ 5, 35, 65]],\n","\n","       [[ 6, 36, 66],\n","        [ 7, 37, 67],\n","        [ 8, 38, 68],\n","        [ 9, 39, 69],\n","        [10, 40, 70],\n","        [11, 41, 71]],\n","\n","       [[12, 42, 72],\n","        [13, 43, 73],\n","        [14, 44, 74],\n","        [15, 45, 75],\n","        [16, 46, 76],\n","        [17, 47, 77]],\n","\n","       [[18, 48, 78],\n","        [19, 49, 79],\n","        [20, 50, 80],\n","        [21, 51, 81],\n","        [22, 52, 82],\n","        [23, 53, 83]],\n","\n","       [[24, 54, 84],\n","        [25, 55, 85],\n","        [26, 56, 86],\n","        [27, 57, 87],\n","        [28, 58, 88],\n","        [29, 59, 89]]])\n","\"\"\""]},{"cell_type":"markdown","metadata":{"id":"nCpBAlJLzQev"},"source":["## c. 배열 펼치기 (flattening)\n","배열 펼치기는 다차원 배열을 일차원으로 만들어줍니다.<br>\n","(MNIST에서도 28 x 28 2차원 배열을 reshape를 통해 길이 784의 일차원 배열로 만들었습니다.\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IrtInQA8Lfo1","executionInfo":{"status":"aborted","timestamp":1647586277515,"user_tz":-540,"elapsed":12,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["k = np.random.rand(5, 6)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Qbx4EHbZgdEI","executionInfo":{"status":"aborted","timestamp":1647586277516,"user_tz":-540,"elapsed":13,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["k"]},{"cell_type":"markdown","metadata":{"id":"krXRrnsOJy6O"},"source":["### 기본 순서대로 펼치기"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2mn0tANc-9LT","executionInfo":{"status":"aborted","timestamp":1647586277516,"user_tz":-540,"elapsed":13,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["# k와 k1을 비교해보세요.\n","k1 = k.flatten() \n","k1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vmvNMqoxgmd1","executionInfo":{"status":"aborted","timestamp":1647586277516,"user_tz":-540,"elapsed":12,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["k1.shape"]},{"cell_type":"markdown","metadata":{"id":"KzC2kEdRKODv"},"source":["### Flattening Arrays along the column"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U1KgPP4HKM3X","executionInfo":{"status":"aborted","timestamp":1647586277516,"user_tz":-540,"elapsed":12,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["k2= k.flatten('F') # forms a 1D array where elements in a column are listed before moving to the next column.\n","k2"]},{"cell_type":"markdown","metadata":{"id":"d_kl2pC6Max8"},"source":["### Flattening Arrays using Ravel"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cTF9riClMeiZ","executionInfo":{"status":"aborted","timestamp":1647586277516,"user_tz":-540,"elapsed":12,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["k3 = k.ravel()\n","k3"]},{"cell_type":"markdown","metadata":{"id":"BuO6iLKjQyUz"},"source":["### Flattening Arrays using Numpy Reshape\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8YOai7ZqL6y0","executionInfo":{"status":"aborted","timestamp":1647586277517,"user_tz":-540,"elapsed":13,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["k4= k.reshape(-1)\n","k4"]},{"cell_type":"markdown","metadata":{"id":"92Xhx3ytPpoX"},"source":["### Flatten vs Ravel\n","Bothe functions take in the same kind of arguments and order to flatten can be specified in both arrays. The difference lies in how the result 1D arrays are are created in both cases."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LAXKU1i5QZkN","executionInfo":{"status":"aborted","timestamp":1647586277517,"user_tz":-540,"elapsed":13,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["test = np.random.rand(4, 5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IYRe4_vWPteC","executionInfo":{"status":"aborted","timestamp":1647586277517,"user_tz":-540,"elapsed":13,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["test_flatten = test.flatten()\n","test_ravel = test.ravel()\n","\n","print(f\"test_flatten: {test_flatten}\")\n","print(f\"test_ravel: {test_ravel}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TVZpAu6nQmd3","executionInfo":{"status":"aborted","timestamp":1647586277517,"user_tz":-540,"elapsed":13,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["test_flatten[0] = 5\n","print(f\"Modified test_flatten: {test_flatten}\")\n","print(f\"Original Array: {test}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SYVgIianQ73X","executionInfo":{"status":"aborted","timestamp":1647586277518,"user_tz":-540,"elapsed":14,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["test_ravel[0] = 5\n","print(f\"Modified test_ravel: {test_ravel}\")\n","print(f\"Original Array: {test}\")"]},{"cell_type":"markdown","metadata":{"id":"lv_Lxkf2z18l"},"source":["## d. Squeezing & Expanding Arrays"]},{"cell_type":"markdown","metadata":{"id":"rEbqqVfrz_zI"},"source":["### Squeezing Numpy Arrays\n","\n","The squeeze operation allows reduction of numpy arrays axes by dropping an specified axis, so long as it is of **unit length**. The product of the shape (overall size of the array) remains the same."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KWRHkIRwU3fn","executionInfo":{"status":"aborted","timestamp":1647586277518,"user_tz":-540,"elapsed":14,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["sq = np.random.rand(4, 1, 5)\n","print(f\"Original Array: \\n{sq}\\n\")\n","print(f\"Shape of Original Array: {sq.shape}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0wMvcLbRU7ZO","executionInfo":{"status":"aborted","timestamp":1647586277518,"user_tz":-540,"elapsed":14,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["# transforms from (4, 1, 5) -> (4, 5)\n","sq1 = np.squeeze(sq)\n","print(f\"Squeezed Array: \\n {sq1}\\n\")\n","print(f\"Shape of Squeezed Array: {sq1.shape}\")"]},{"cell_type":"markdown","metadata":{"id":"PTkp8T21Xzvc"},"source":["#### Squeezing Multiple Axes\n","Multiple unit length axes can be squeezed as shown below"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"b5FfAJWNXAgB","executionInfo":{"status":"aborted","timestamp":1647586277518,"user_tz":-540,"elapsed":13,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["q = np.random.rand(1, 4, 1, 5)\n","print(f\"Original Array: \\n {q}\\n\")\n","print(f\"Shape of Original Array: {q.shape}\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N1UV_58ZYEId","executionInfo":{"status":"aborted","timestamp":1647586277519,"user_tz":-540,"elapsed":14,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["q1 = np.squeeze(q)\n","print(f\"Multiple Squeezed Array: \\n {q1}\\n\")\n","print(f\"Shape of Multiple Squeezed Array: {q1.shape}\")"]},{"cell_type":"markdown","metadata":{"id":"Xaq-rqWGY4Vv"},"source":["#### Squeezing specified axes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"itvXlWOcY7f1","executionInfo":{"status":"aborted","timestamp":1647586277519,"user_tz":-540,"elapsed":14,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["q2 = np.squeeze(q, axis=2)\n","print(f\"Specified axis Squeezed Array: {q2}\\n\")\n","print(f\"Shape of Specified axis Squeezed Array: {q2.shape}\")"]},{"cell_type":"markdown","metadata":{"id":"4OErK4oLZZyd"},"source":["### Unsqueezing (Expanding) Numpy Arrays\n","This is the direct opposite of squeezing. A new unit axis is inserted in specified position. Multiple unit axes can be inserted by using a tuple on the axis attribute of the `expand_dims` method."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oaE5pGBAaFDD","executionInfo":{"status":"aborted","timestamp":1647586277519,"user_tz":-540,"elapsed":14,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["y = np.random.rand(4, 5)\n","print(f\"Original Array: \\n {y}\\n\")\n","print(f\"Shape of Original Array: {y.shape}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"k4Me0R0LaQKZ","executionInfo":{"status":"aborted","timestamp":1647586277520,"user_tz":-540,"elapsed":15,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["# transforms from (4, 5) -> (4, 1, 5)\n","y1 = np.expand_dims(y, axis=1)\n","print(f\"Expanded Array: \\n {y1}\\n\")\n","print(f\"Shape of Expanded Array: {y1.shape}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p0-bX_qCah5W","executionInfo":{"status":"aborted","timestamp":1647586277520,"user_tz":-540,"elapsed":14,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}}},"outputs":[],"source":["# transforms from (4, 5) -> (1, 4, 1, 5)\n","y2 = np.expand_dims(y, axis=(0, 2))\n","print(f\"Multi-axes Expanded Array: \\n {y2}\\n\")\n","print(f\"Shape of Multi-axes Expanded Array: {y2.shape}\")"]},{"cell_type":"markdown","metadata":{"id":"zgNG6cvF-9ol"},"source":["# 5.Combining data"]},{"cell_type":"markdown","metadata":{"id":"C5lnL5dLTsnP"},"source":["### 5a. Concatenation"]},{"cell_type":"markdown","metadata":{"id":"dN9Gwkd_Tp74"},"source":["A concatenation operation joins a sequence of arrays along an *existing* axis. All arrays must either have the same shape (except in the concatenating dimension) or be empty.\n","\n","---\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":511},"id":"c0Txtg39VRGw","outputId":"abca2c73-869b-4ae2-f76a-c3558afe4bef"},"outputs":[{"name":"stdout","output_type":"stream","text":["Array 1 is \n"," [[1 2]\n"," [3 4]]  with dimensions  (2, 2) \n","\n","Array 2 is \n"," [[5 6]]  with dimensions  (1, 2) \n","\n","Concatenated array 1 along axis 0 (row-wise for 2-d arrays) is \n"," [[1 2]\n"," [3 4]\n"," [5 6]] with dimensions  (3, 2) \n","\n"]},{"ename":"ValueError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-36bf3dfac8c1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Concatenated array 1 along axis 0 (row-wise for 2-d arrays) is \\n\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconcatenated_array1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"with dimensions \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconcatenated_array1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'\\n'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mconcatenated_array2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marray2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Concatenated array 2 along axis 0 (column-wise for 2-d arrays) is \\n\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconcatenated_array1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"with dimensions \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconcatenated_array1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mconcatenate\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: all the input array dimensions for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 2 and the array at index 1 has size 1"]}],"source":["# Concatenating 2-d Arrays\n","\n","array1 = np.array([[1, 2], [3, 4]])\n","print(\"Array 1 is \\n\", array1, \" with dimensions \", array1.shape, \"\\n\")\n","\n","array2 = np.array([[5, 6]])\n","print(\"Array 2 is \\n\", array2, \" with dimensions \", array2.shape, \"\\n\")\n","\n","\n","concatenated_array1 = np.concatenate((array1, array2), axis = 0) \n","print(\"Concatenated array 1 along axis 0 (row-wise for 2-d arrays) is \\n\", concatenated_array1, \"with dimensions \", concatenated_array1.shape, '\\n')\n","\n","concatenated_array2 = np.concatenate((array1, array2), axis = 1) \n","print(\"Concatenated array 2 along axis 0 (column-wise for 2-d arrays) is \\n\", concatenated_array1, \"with dimensions \", concatenated_array1.shape)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_dnrpzRvTLs1","outputId":"e6ca3b02-585a-480b-bea7-aa9c347e8fe8"},"outputs":[{"name":"stdout","output_type":"stream","text":["Array 1 is \n"," [[[0 1 0 1 1]\n","  [2 0 2 0 0]\n","  [0 2 1 2 2]\n","  [0 1 1 1 1]]\n","\n"," [[0 1 0 0 1]\n","  [2 0 2 0 1]\n","  [1 2 0 1 1]\n","  [1 0 2 0 2]]\n","\n"," [[2 0 2 0 0]\n","  [0 1 1 2 0]\n","  [0 1 0 1 2]\n","  [2 0 1 1 1]]]  with dimensions  (3, 4, 5) \n","\n","Array 2 is \n"," [[[1 3 2 3 3]\n","  [2 2 3 0 2]\n","  [3 1 0 1 2]\n","  [0 3 0 2 0]]\n","\n"," [[3 3 0 3 0]\n","  [0 0 0 2 3]\n","  [0 3 2 3 3]\n","  [1 1 1 0 1]]\n","\n"," [[1 1 3 0 3]\n","  [1 2 0 1 2]\n","  [0 2 0 1 3]\n","  [2 2 1 0 3]]]  with dimensions  (3, 4, 5) \n","\n","Concatenated array 1 is \n"," [[[0 1 0 1 1]\n","  [2 0 2 0 0]\n","  [0 2 1 2 2]\n","  [0 1 1 1 1]]\n","\n"," [[0 1 0 0 1]\n","  [2 0 2 0 1]\n","  [1 2 0 1 1]\n","  [1 0 2 0 2]]\n","\n"," [[2 0 2 0 0]\n","  [0 1 1 2 0]\n","  [0 1 0 1 2]\n","  [2 0 1 1 1]]\n","\n"," [[1 3 2 3 3]\n","  [2 2 3 0 2]\n","  [3 1 0 1 2]\n","  [0 3 0 2 0]]\n","\n"," [[3 3 0 3 0]\n","  [0 0 0 2 3]\n","  [0 3 2 3 3]\n","  [1 1 1 0 1]]\n","\n"," [[1 1 3 0 3]\n","  [1 2 0 1 2]\n","  [0 2 0 1 3]\n","  [2 2 1 0 3]]] \n","\n"," and the dimensions of the concatenated array 1 are: \n"," (6, 4, 5)\n","Concatenated array 2 is \n"," [[[0 1 0 1 1]\n","  [2 0 2 0 0]\n","  [0 2 1 2 2]\n","  [0 1 1 1 1]\n","  [1 3 2 3 3]\n","  [2 2 3 0 2]\n","  [3 1 0 1 2]\n","  [0 3 0 2 0]]\n","\n"," [[0 1 0 0 1]\n","  [2 0 2 0 1]\n","  [1 2 0 1 1]\n","  [1 0 2 0 2]\n","  [3 3 0 3 0]\n","  [0 0 0 2 3]\n","  [0 3 2 3 3]\n","  [1 1 1 0 1]]\n","\n"," [[2 0 2 0 0]\n","  [0 1 1 2 0]\n","  [0 1 0 1 2]\n","  [2 0 1 1 1]\n","  [1 1 3 0 3]\n","  [1 2 0 1 2]\n","  [0 2 0 1 3]\n","  [2 2 1 0 3]]] \n","\n"," and the dimensions of the concatenated array 2 are: \n"," (3, 8, 5)\n","Concatenated array 3 is \n"," [[[0 1 0 1 1 1 3 2 3 3]\n","  [2 0 2 0 0 2 2 3 0 2]\n","  [0 2 1 2 2 3 1 0 1 2]\n","  [0 1 1 1 1 0 3 0 2 0]]\n","\n"," [[0 1 0 0 1 3 3 0 3 0]\n","  [2 0 2 0 1 0 0 0 2 3]\n","  [1 2 0 1 1 0 3 2 3 3]\n","  [1 0 2 0 2 1 1 1 0 1]]\n","\n"," [[2 0 2 0 0 1 1 3 0 3]\n","  [0 1 1 2 0 1 2 0 1 2]\n","  [0 1 0 1 2 0 2 0 1 3]\n","  [2 0 1 1 1 2 2 1 0 3]]] \n","\n"," and the dimensions of the concatenated array 3 are: \n"," (3, 4, 10)\n"]}],"source":["# Concatenating Numpy Arrays\n","\n","array1 = np.random.randint(3, size = (3, 4, 5))\n","print(\"Array 1 is \\n\", array1, \" with dimensions \", array1.shape, \"\\n\")\n","\n","array2 = np.random.randint(4, size = (3, 4, 5))\n","print(\"Array 2 is \\n\", array2, \" with dimensions \", array2.shape, \"\\n\")\n","\n","concatenated_array1 = np.concatenate((array1, array2), axis = 0) \n","print(\"Concatenated array 1 is \\n\", concatenated_array1, \"\\n\\n\", \"and the dimensions of the concatenated array 1 are: \\n\", concatenated_array1.shape)\n","\n","concatenated_array2 = np.concatenate((array1, array2), axis = 1) \n","print(\"Concatenated array 2 is \\n\", concatenated_array2, \"\\n\\n\", \"and the dimensions of the concatenated array 2 are: \\n\", concatenated_array2.shape)\n","\n","concatenated_array3 = np.concatenate((array1, array2), axis = 2) \n","print(\"Concatenated array 3 is \\n\", concatenated_array3, \"\\n\\n\", \"and the dimensions of the concatenated array 3 are: \\n\", concatenated_array3.shape)\n"]},{"cell_type":"markdown","metadata":{"id":"tL8qvApgZDZi"},"source":["### 5b. Stacking"]},{"cell_type":"markdown","metadata":{"id":"FgrcUuNCZY3J"},"source":["The stack operation joins a sequence of arrays along a *new* axis. The axis parameter specifies the index of the new axis in the dimensions of the result. For example, if axis=0 it will be the first dimension and if axis=-1 it will be the last dimension. All arrays need to be of the same size.  The stacked array has one more dimension than the input arrays."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8VnRi569ZbYr","outputId":"7b34abab-0708-4701-d752-e6b2a3bb44d7"},"outputs":[{"name":"stdout","output_type":"stream","text":["Array 1 is \n"," [1 2 3]  with dimensions  (3,) \n","\n","Array 2 is \n"," [4 5 6]  with dimensions  (3,) \n","\n","Stacked array 1 is \n"," [[1 2 3]\n"," [4 5 6]]  with dimensions  (2, 3)\n","Stacked array 2 is \n"," [[1 4]\n"," [2 5]\n"," [3 6]]  with dimensions  (3, 2)\n","Stacked array 3 is \n"," [[1 4]\n"," [2 5]\n"," [3 6]]  with dimensions  (3, 2)\n"]}],"source":["# Stacking 1-d Arrays\n","\n","array1 = np.array([1, 2, 3])\n","print(\"Array 1 is \\n\", array1, \" with dimensions \", array1.shape, \"\\n\")\n","\n","array2 = np.array([4, 5, 6])\n","print(\"Array 2 is \\n\", array2, \" with dimensions \", array2.shape, \"\\n\")\n","\n","\n","stacked_array1 = np.stack((array1, array2), axis = 0)\n","print(\"Stacked array 1 is \\n\", stacked_array1, \" with dimensions \", stacked_array1.shape)\n","\n","stacked_array2 = np.stack((array1, array2), axis = 1) \n","print(\"Stacked array 2 is \\n\", stacked_array2, \" with dimensions \", stacked_array2.shape)\n","\n","stacked_array3 = np.stack((array1, array2), axis = -1) \n","print(\"Stacked array 3 is \\n\", stacked_array3, \" with dimensions \", stacked_array3.shape)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BWCGag2Kadlj","outputId":"e6ee9895-afeb-4194-e40c-5b59ae48f4f8"},"outputs":[{"name":"stdout","output_type":"stream","text":["Array 1 has dimensions  (3, 4, 5) \n","\n","Array 2 has dimensions  (3, 4, 5) \n","\n","Stacked array 1 has dimensions (2, 3, 4, 5) \n","\n","Stacked array 2 has dimensions (3, 2, 4, 5) \n","\n","Stacked array 3 has dimensions (3, 4, 2, 5) \n","\n","Stacked array 4 has dimensions (3, 4, 5, 2) \n","\n"]}],"source":["\n","# Stacking Numpy Arrays\n","\n","array1 = np.random.randint(3, size = (3, 4, 5))\n","print(\"Array 1 has dimensions \", array1.shape, \"\\n\")\n","\n","array2 = np.random.randint(4, size = (3, 4, 5))\n","print(\"Array 2 has dimensions \", array2.shape, \"\\n\")\n","\n","stacked_array1 = np.stack((array1, array2), axis = 0)\n","print(\"Stacked array 1 has dimensions\", stacked_array1.shape, \"\\n\")\n","\n","stacked_array2 = np.stack((array1, array2), axis = 1) \n","print(\"Stacked array 2 has dimensions\", stacked_array2.shape, \"\\n\")\n","\n","stacked_array3 = np.stack((array1, array2), axis = 2) \n","print(\"Stacked array 3 has dimensions\", stacked_array3.shape, \"\\n\")\n","\n","stacked_array4 = np.stack((array1, array2), axis = -1)\n","print(\"Stacked array 4 has dimensions\", stacked_array4.shape, \"\\n\")\n","\n"]},{"cell_type":"markdown","metadata":{"id":"8261iA_qa4vP"},"source":["###5c. Repeat"]},{"cell_type":"markdown","metadata":{"id":"hhmrx2g2a-kW"},"source":["The repeat operation repeats elements of an array. The number of repetitions for each element is broadcasted to fit the shape of the given axis. The axis parameter specifies along which axis to repeat values. By default, it uses the flattened input array, and return a flat output array."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HROTjVJsa8cG","outputId":"80c530e0-52a8-462b-84b1-31b624e27081"},"outputs":[{"name":"stdout","output_type":"stream","text":["Array is \n"," [[1 2]\n"," [3 4]]  with dimensions  (2, 2) \n","\n","Repeated array 1 is \n"," [1 1 2 2 3 3 4 4] \n","\n"," and the dimensions of the repeated array 1 are: \n"," (8,) \n","\n","Repeated array 2 is \n"," [[1 2]\n"," [1 2]\n"," [1 2]\n"," [3 4]\n"," [3 4]\n"," [3 4]] \n","\n"," and the dimensions of the repeated array 2 are: \n"," (6, 2) \n","\n","Repeated array 3 is \n"," [[1 1 1 2 2 2]\n"," [3 3 3 4 4 4]] \n","\n"," and the dimensions of the repeated array 3 are: \n"," (2, 6) \n","\n","Repeated array 4 is \n"," [[1 2]\n"," [1 2]\n"," [3 4]\n"," [3 4]\n"," [3 4]] \n","\n"," and the dimensions of the repeated array 4 are: \n"," (5, 2) \n","\n"]}],"source":["\n","# Repeat in Numpy Arrays\n","\n","original_array = np.array([[1,2],[3,4]])\n","print(\"Array is \\n\", original_array, \" with dimensions \", original_array.shape, \"\\n\")\n","\n","repeated_array1 = np.repeat(original_array, 2)\n","print(\"Repeated array 1 is \\n\", repeated_array1, \"\\n\\n\", \"and the dimensions of the repeated array 1 are: \\n\", repeated_array1.shape, \"\\n\")\n","\n","repeated_array2 = np.repeat(original_array, 3, axis=0)\n","print(\"Repeated array 2 is \\n\", repeated_array2, \"\\n\\n\", \"and the dimensions of the repeated array 2 are: \\n\", repeated_array2.shape, \"\\n\")\n","\n","repeated_array3 = np.repeat(original_array, 3, axis=1)\n","print(\"Repeated array 3 is \\n\", repeated_array3, \"\\n\\n\", \"and the dimensions of the repeated array 3 are: \\n\", repeated_array3.shape, \"\\n\")\n","\n","repeated_array4 = np.repeat(original_array, [2,3], axis=0)\n","print(\"Repeated array 4 is \\n\", repeated_array4, \"\\n\\n\", \"and the dimensions of the repeated array 4 are: \\n\", repeated_array4.shape, \"\\n\")\n"]},{"cell_type":"markdown","metadata":{"id":"zOlZOF8r_AXO"},"source":["# 6. Math operations"]},{"cell_type":"markdown","metadata":{"id":"Qu8ZLACkSvaU"},"source":["In this section we will cover some commonly used mathematical operations\n","1. Broadcasting\n","1. Point-wise/element-wise operations\n","1. Redution operations\n","1. Comparison operations\n","1. Vector/Matrix operations"]},{"cell_type":"markdown","metadata":{"id":"j1hTl9b4_Jre"},"source":["## a. Broadcasting"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PbC7tpbM_DGV","outputId":"5d1799ce-2edd-475d-ecd1-5a295c1b6fbc"},"outputs":[{"name":"stdout","output_type":"stream","text":["A row array: \n"," [[0.94466892 0.52184832 0.41466194]]  with dimensions  (1, 3) \n","\n","A column array: \n"," [[0.26455561]\n"," [0.77423369]\n"," [0.45615033]\n"," [0.56843395]]  with dimensions  (4, 1) \n","\n","row array + column array = \n","[[1.20922453 0.78640393 0.67921755]\n"," [1.71890261 1.29608201 1.18889563]\n"," [1.40081925 0.97799865 0.87081227]\n"," [1.51310287 1.09028227 0.98309589]]  with dimensions  (4, 3) \n","\n","row array * column array = \n","[[0.24991746 0.1380579  0.10970114]\n"," [0.7313945  0.40403255 0.32104524]\n"," [0.43091104 0.23804129 0.18914818]\n"," [0.53698188 0.2966363  0.23570792]]  with dimensions  (4, 3) \n","\n"]}],"source":["# Broadcasting b/w arrays of different dimensions\n","# Note: When broadting two multi-dimensional tensors, match their corresponding dimensions beginning from the last dimension.\n","# All dimensions should either match or one of the arrays should have length 1 in that specific dimension\n","\n","row_arr = np.random.rand(1,3)\n","print(\"A row array: \\n\", row_arr, \" with dimensions \", row_arr.shape, \"\\n\")\n","col_arr = np.random.rand(4,1)\n","print(\"A column array: \\n\", col_arr, \" with dimensions \", col_arr.shape, \"\\n\")\n","\n","add_arr = row_arr + col_arr\n","print(\"row array + column array = \")\n","print(add_arr,\" with dimensions \", add_arr.shape, \"\\n\")\n","mul_arr = row_arr * col_arr\n","print(\"row array * column array = \")\n","print(mul_arr,\" with dimensions \", mul_arr.shape, \"\\n\")\n"]},{"cell_type":"markdown","metadata":{"id":"AnNUVLDg_Y0Y"},"source":["## b.Element-wise operations"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"miu5scYG_b7I","outputId":"5ba392d2-0692-4e31-988b-961c0fd82d77"},"outputs":[{"name":"stdout","output_type":"stream","text":["A random array1 : \n"," [[0.0187898  0.6176355  0.61209572]\n"," [0.616934   0.94374808 0.6818203 ]]  with dimensions  (2, 3) \n","\n","A random array2 : \n"," [[0.3595079  0.43703195 0.6976312 ]\n"," [0.06022547 0.66676672 0.67063787]]  with dimensions  (2, 3) \n","\n","random array1 + 5.0 =\n","[[5.0187898  5.6176355  5.61209572]\n"," [5.616934   5.94374808 5.6818203 ]] \n","\n","random array1 * 5.0 =\n","[[0.093949   3.08817749 3.06047861]\n"," [3.08466998 4.71874039 3.4091015 ]] \n","\n","random array1 + random array2 =\n","[[0.3782977  1.05466745 1.30972692]\n"," [0.67715947 1.61051479 1.35245817]] \n","\n","random array1 * random array2 =\n","[[0.00675508 0.26992645 0.42701707]\n"," [0.03715514 0.62925981 0.45725451]] \n","\n","abs (-10 * random array1) =\n","[[0.187898   6.17635497 6.12095723]\n"," [6.16933997 9.43748079 6.81820299]] \n","\n","sqrt(random array1) = \n"," [[0.13707589 0.78589789 0.78236547]\n"," [0.78545146 0.97146697 0.82572411]] \n","\n"]}],"source":["rand_arr_1 = np.random.rand(2,3)\n","print(\"A random array1 : \\n\", rand_arr_1, \" with dimensions \", rand_arr_1.shape, \"\\n\")\n","rand_arr_2 = np.random.rand(2,3)\n","print(\"A random array2 : \\n\", rand_arr_2, \" with dimensions \", rand_arr_2.shape, \"\\n\")\n","scalar = 5.0\n","\n","# Addition with Scalars\n","new_arr_1 = rand_arr_1 + scalar\n","print(\"random array1 + 5.0 =\")\n","print(new_arr_1, \"\\n\")\n","\n","# Multiplication with Scalars\n","new_arr_2 = rand_arr_1 * scalar\n","print(\"random array1 * 5.0 =\")\n","print(new_arr_2, \"\\n\")\n","\n","# Elementwise Addition of Arrays\n","new_arr_3 = rand_arr_1 + rand_arr_2\n","print(\"random array1 + random array2 =\")\n","print(new_arr_3, \"\\n\")\n","\n","# Elementwise Multiplication of Arrays aka Hadmard Product\n","new_arr_4 = rand_arr_1 * rand_arr_2\n","print(\"random array1 * random array2 =\")\n","print(new_arr_4, \"\\n\") # also equivalent to np.multiply(array1, array2)\n","\n","# Absolute value\n","new_arr_5 = np.abs(-10*rand_arr_1)\n","print(\"abs (-10 * random array1) =\")\n","print(new_arr_5, \"\\n\")\n","\n","# Square root value\n","new_arr_6 = np.sqrt(rand_arr_1)\n","print('sqrt(random array1) = \\n', new_arr_6, \"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"YE_Gl8fd_wxc"},"source":["## c.Reduction"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2BEc2arl_y3Z","outputId":"faa025e8-1f9c-476c-911e-166f678342f3"},"outputs":[{"name":"stdout","output_type":"stream","text":["random array: \n"," [[0.21038256 0.1289263  0.31542835]\n"," [0.36371077 0.57019677 0.43860151]] \n","\n","Maximum value of array \n"," 0.5701967704178796 \n","\n","Minimum value of array \n"," 0.1289262976548533 \n","\n","Sum of array \n"," 2.0272462644757008 \n","\n","Maximum value's index of array along axis 0 \n"," [1 1 1] \n","\n","Minimum value's index of array along axis 1 \n"," [1 0] \n","\n","Mean value of array \n"," 0.3378743774126168 \n","\n","Standard deviation value of array \n"," 0.14445556227437842 \n","\n","Norm value of array \n"," 0.9000883436106821 \n","\n"]}],"source":["rand_arr = np.random.rand(2,3)\n","print('random array: \\n', rand_arr, \"\\n\")\n","\n","max_val = np.max(rand_arr)\n","print('Maximum value of array \\n', max_val, \"\\n\")\n","min_val = np.min(rand_arr)\n","print('Minimum value of array \\n', min_val, \"\\n\")\n","\n","sum_val = np.sum(rand_arr)\n","print('Sum of array \\n', sum_val, \"\\n\")\n","max_idx = np.argmax(rand_arr, axis=0)\n","print('Maximum value\\'s index of array along axis 0 \\n', max_idx, \"\\n\")\n","min_idx = np.argmin(rand_arr, axis=1)\n","print('Minimum value\\'s index of array along axis 1 \\n', min_idx, \"\\n\")\n","\n","mean_val = np.mean(rand_arr)\n","print('Mean value of array \\n', mean_val, \"\\n\")\n","std_val = np.std(rand_arr)\n","print('Standard deviation value of array \\n', std_val, \"\\n\")\n","norm_val = np.linalg.norm(rand_arr)\n","print('Norm value of array \\n', norm_val, \"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"7dX2TV-DANcv"},"source":["## d.Comparision"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_WknmTBnAPV0","outputId":"b9509364-08d5-4743-e78f-43ce01bd4cb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["random array1: \n"," [[0.98837384 0.10204481 0.20887676]\n"," [0.16130952 0.65310833 0.2532916 ]] \n","\n","random array2: \n"," [[0.46631077 0.24442559 0.15896958]\n"," [0.11037514 0.65632959 0.13818295]] \n","\n","random array1 > random array2\n","[[ True False  True]\n"," [ True False  True]] \n","\n","random array1 < random array2\n","[[False  True False]\n"," [False  True False]] \n","\n","random array1 != random array2\n","[[ True  True  True]\n"," [ True  True  True]] \n","\n","any values for random array1 > random array2:\n","True \n","\n","all values for random array1 > random array2:\n","False \n","\n","any values along first axis for random array1 > random array2:\n","[ True False  True] \n","\n","any values along second axis for random array1 > random array2:\n","[ True  True] \n","\n","any values for random array1 != random array2:\n","True \n","\n","all values for random array1 != random array2:\n","True \n","\n"]}],"source":["rand_arr_1 = np.random.rand(2,3)\n","print('random array1: \\n', rand_arr_1, '\\n')\n","rand_arr_2 = np.random.rand(2,3)\n","print('random array2: \\n', rand_arr_2, '\\n')\n","\n","# Element-wise Comparison Operations\n","greater_compare = rand_arr_1 > rand_arr_2\n","print('random array1 > random array2')\n","print(greater_compare, '\\n')\n","\n","less_compare = rand_arr_1 < rand_arr_2\n","print('random array1 < random array2')\n","print(less_compare, '\\n')\n","\n","not_equal_compare = rand_arr_1 != rand_arr_2\n","print('random array1 != random array2')\n","print(not_equal_compare, '\\n')\n","\n","# Combining reduction operations with boolean arrays\n","print(\"any values for random array1 > random array2:\")\n","print((rand_arr_1 > rand_arr_2).any(), \"\\n\")\n","\n","print(\"all values for random array1 > random array2:\")\n","print((rand_arr_1 > rand_arr_2).all(), \"\\n\")\n","\n","print(\"any values along first axis for random array1 > random array2:\")\n","print((rand_arr_1 > rand_arr_2).any(axis=0), \"\\n\")\n","\n","print(\"any values along second axis for random array1 > random array2:\")\n","print((rand_arr_1 > rand_arr_2).any(axis=1), \"\\n\")\n","\n","print(\"any values for random array1 != random array2:\")\n","print((rand_arr_1 != rand_arr_2).any(), \"\\n\")\n","\n","print(\"all values for random array1 != random array2:\")\n","print((rand_arr_1 != rand_arr_2).all(), \"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"eKQLWKRaAW2_"},"source":["## e.Vector/Matrix operations"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TLVtVbbvXUor","outputId":"eddb40bb-3f97-462c-a7da-aec605ae2d5c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Array1 \n"," [-0.51080514 -1.18063218 -0.02818223] with dimension  (3,) \n","\n","Array2 \n"," [0.42833187 0.06651722 0.3024719 ] with dimension  (3,) \n","\n","Matmul of the two arrays can be derived by using np.matmul(array1, array2) \n"," -0.3058508256835472\n","Matmul of the two arrays can also be derived by using array1@array2 \n"," -0.3058508256835472\n","Dimensions of resulting product: \n"," ()\n","Array3 \n"," [[-0.63432209 -0.36274117 -0.67246045 -0.35955316]\n"," [-0.81314628 -1.7262826   0.17742614 -0.40178094]\n"," [-1.63019835  0.46278226 -0.90729836  0.0519454 ]] with dimension  (3, 4) \n","\n","Array4 \n"," [ 0.72909056  0.12898291  1.13940068 -1.23482582] with dimension  (4,) \n","\n","Matmul of a vector and a matrix can be derived by using np.matmul(array3, array4) \n"," [-0.83148203 -0.11722929 -2.22679112]\n","Matmul of a vector and a matrix can also be derived by using array3@array4 \n"," [-0.83148203 -0.11722929 -2.22679112]\n","Dimensions of resulting product: \n"," (3,)\n","Matrix1 \n"," [[3 0 0]\n"," [2 0 2]] with dimension  (2, 3) \n","\n","Matrix2 \n"," [[3 2]\n"," [2 3]\n"," [0 0]] with dimension  (3, 2) \n","\n","Matmul of two matrices can be derived by using np.matmul(matrix1, matrix2) \n"," [[9 6]\n"," [6 4]]\n","Dimensions of resulting product: \n"," (2, 2) \n","\n"]}],"source":["# Vector x Vector\n","array1 = np.random.randn(3)\n","array2 = np.random.randn(3)\n","\n","print('Array1 \\n', array1, 'with dimension ', array1.shape, '\\n')\n","print('Array2 \\n', array2, 'with dimension ', array2.shape, '\\n')\n","\n","matmul_arr = np.matmul(array1, array2)\n","another_arr = array1@array2\n","print('Matmul of the two arrays can be derived by using np.matmul(array1, array2) \\n', matmul_arr)\n","print(\"Matmul of the two arrays can also be derived by using array1@array2 \\n\", another_arr)\n","print('Dimensions of resulting product: \\n', matmul_arr.shape)\n","\n","# Matrix x Vector\n","array3 = np.random.randn(3, 4)\n","array4 = np.random.randn(4)\n","\n","print('Array3 \\n', array3, 'with dimension ', array3.shape, '\\n')\n","print('Array4 \\n', array4, 'with dimension ', array4.shape, '\\n')\n","\n","matmul_arr = np.matmul(array3, array4)\n","another_arr = array3@array4\n","print('Matmul of a vector and a matrix can be derived by using np.matmul(array3, array4) \\n', matmul_arr)\n","print('Matmul of a vector and a matrix can also be derived by using array3@array4 \\n', another_arr)\n","print('Dimensions of resulting product: \\n', matmul_arr.shape)\n","\n","# Matrix x Matrix \n","\n","matrix1 = np.random.randint(4, size = (2, 3))\n","matrix2 = np.random.randint(4, size = (3, 2))\n","\n","print('Matrix1 \\n', matrix1, 'with dimension ', matrix1.shape, '\\n')\n","print('Matrix2 \\n', matrix2, 'with dimension ', matrix2.shape, '\\n')\n","\n","matmul_mat = np.matmul(matrix1, matrix2)\n","print('Matmul of two matrices can be derived by using np.matmul(matrix1, matrix2) \\n', matmul_mat)\n","print('Dimensions of resulting product: \\n', matmul_mat.shape, \"\\n\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FUfwyTPiAbC7","outputId":"fa793c3a-c4aa-4526-8138-b712047955a9"},"outputs":[{"name":"stdout","output_type":"stream","text":["Matrix1 \n"," [[0.82894003 0.00469548]\n"," [0.67781654 0.27000797]\n"," [0.73519402 0.96218855]\n"," [0.24875314 0.57615733]] with dimension  (4, 2) \n","\n","Matrix2 \n"," [[0.59204193 0.57225191 0.22308163]\n"," [0.95274901 0.44712538 0.84640867]] with dimension  (2, 3) \n","\n","Dot product of two matrices can be derived by using np.dot(mat1, mat2) \n"," [[0.49524087 0.47646198 0.18889559]\n"," [0.65854564 0.50860922 0.37974551]\n"," [1.35198987 0.8509351  0.97841301]\n"," [0.69620562 0.39996403 0.54315682]]\n","Dot product of two matrices can also be derived by using mat1@mat2 \n"," [[0.49524087 0.47646198 0.18889559]\n"," [0.65854564 0.50860922 0.37974551]\n"," [1.35198987 0.8509351  0.97841301]\n"," [0.69620562 0.39996403 0.54315682]]\n","Dimensions of resulting product: \n"," (4, 3)\n","array1 's dimension  (9, 5, 7, 4) \n","\n","array2 's dimension  (9, 5, 4, 3) \n","\n","Matmul of two multi-dimension arrays can be derived by using np.matmul(array1, array2) \n","\n","Dimensions of resulting product: \n"," (9, 5, 7, 3)\n"]}],"source":["rand_mat_1 = np.random.rand(4,2)\n","rand_mat_2 = np.random.rand(2,3)\n","print('Matrix1 \\n', rand_mat_1, 'with dimension ', rand_mat_1.shape, '\\n')\n","print('Matrix2 \\n', rand_mat_2, 'with dimension ', rand_mat_2.shape, '\\n')\n","\n","# dot product\n","dot_mat = np.dot(rand_mat_1, rand_mat_2)\n","another_mat = rand_mat_1@rand_mat_2\n","print('Dot product of two matrices can be derived by using np.dot(mat1, mat2) \\n', dot_mat)\n","print('Dot product of two matrices can also be derived by using mat1@mat2 \\n', another_mat)\n","print('Dimensions of resulting product: \\n', dot_mat.shape)\n","\n","a = np.ones([9, 5, 7, 4])\n","b = np.ones([9, 5, 4, 3])\n","print('array1 \\'s dimension ', a.shape, '\\n')\n","print('array2 \\'s dimension ', b.shape, '\\n')\n","\n","# matmul with multi-dimenstion arrays\n","c = np.matmul(a,b)\n","print('Matmul of two multi-dimension arrays can be derived by using np.matmul(array1, array2) \\n')\n","print('Dimensions of resulting product: \\n', c.shape)"]},{"cell_type":"markdown","metadata":{"id":"xkoAAwWVam3U"},"source":["###Tensordot\n","\n","Understanding tensordot function will help you in writing succint code for your homeworks especially in Convolutional Neural Net assignment.\n","\n","To give a brief overview: \n","We input the arrays and the respective axes along which the sum-reductions are intended. The axes that take part in sum-reduction are removed in the output and all of the remaining axes from the input arrays are spread-out as different axes in the output keeping the order in which the input arrays are fed.\n","\n","To understand in depth please checkout: https://stackoverflow.com/questions/41870228/understanding-tensordot"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uksWAaQxarn1","outputId":"6e935738-2296-417e-8355-c99ec37de081"},"outputs":[{"name":"stdout","output_type":"stream","text":["A 's dimension  (3, 4, 5) \n","\n","B 's dimension  (4, 3, 2) \n","\n","A⨂B =\n"," [[4400. 4730.]\n"," [4532. 4874.]\n"," [4664. 5018.]\n"," [4796. 5162.]\n"," [4928. 5306.]]  with dimension (5, 2) \n","\n","tensor dot is equal to sum over certain dimensions.\n","\n","[[ True  True]\n"," [ True  True]\n"," [ True  True]\n"," [ True  True]\n"," [ True  True]]\n"]}],"source":["a = np.arange(60.).reshape(3,4,5)\n","b = np.arange(24.).reshape(4,3,2)\n","print('A \\'s dimension ', a.shape, '\\n')\n","print('B \\'s dimension ', b.shape, '\\n')\n","\n","# compute tensor dot product along specified axes.\n","c = np.tensordot(a,b, axes=([1,0],[0,1]))\n","print(\"A⨂B =\\n\", c, ' with dimension', c.shape, '\\n')\n","\n","# this equals to \n","d = np.zeros((5,2))\n","for i in range(5):\n","  for j in range(2):\n","    for k in range(3):\n","      for n in range(4):\n","        d[i,j] += a[k,n,i] * b[n,k,j]\n","print(\"tensor dot is equal to sum over certain dimensions.\\n\")\n","print(c==d)"]}],"metadata":{"colab":{"collapsed_sections":[],"name":"KW_DLLAB_2022_03_Fundamentals_of_Numpy_조현민_.ipynb의 사본","provenance":[{"file_id":"1SC0E7w0V2UmeCwSED-rtK9jjqTsp36hX","timestamp":1647584829068}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"nbformat":4,"nbformat_minor":0}