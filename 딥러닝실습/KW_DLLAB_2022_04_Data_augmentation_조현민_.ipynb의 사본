{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"KW_DLLAB_2022_04_Data_augmentation_조현민_.ipynb의 사본","provenance":[{"file_id":"1rEmTY0qiBXKvbx5sro9q9E-YcyMnchCO","timestamp":1648192089936}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# MNIST: Simple CNN keras (Accuracy : 0.99)=>Top 1%\n","\n","원본 출처: https://www.kaggle.com/code/elcaiseri/mnist-simple-cnn-keras-accuracy-0-99-top-1/notebook"],"metadata":{"id":"IJEdIOcDNR2S"}},{"cell_type":"markdown","source":["상단 메뉴 런타임 - 런타임 유형 변경에서 **GPU**를 선택하고 진행하세요."],"metadata":{"id":"06nXbC0oNqMv"}},{"cell_type":"markdown","source":["## 이미지 변환 함수 (PNG -> 정규화된 일차원 배열)"],"metadata":{"id":"XoW-2emvOPvL"}},{"cell_type":"code","source":["# image_prepare(파일이름)으로 호출하면 정규화된 일차원 리스트를 반환합니다.\n","\n","from PIL import Image, ImageFilter\n","\n","def image_prepare(argv):\n","    \"\"\"\n","    This function returns the pixel values.\n","    The imput is a png file location.\n","    \"\"\"\n","    im = Image.open(argv).convert('L')\n","    width = float(im.size[0])\n","    height = float(im.size[1])\n","    newImage = Image.new('L', (28, 28), (255))  # creates white canvas of 28x28 pixels\n","\n","    if width > height:  # check which dimension is bigger\n","        # Width is bigger. Width becomes 20 pixels.\n","        nheight = int(round((20.0 / width * height), 0))  # resize height according to ratio width\n","        if (nheight == 0):  # rare case but minimum is 1 pixel\n","            nheight = 1\n","            # resize and sharpen\n","        img = im.resize((20, nheight), Image.ANTIALIAS).filter(ImageFilter.SHARPEN)\n","        wtop = int(round(((28 - nheight) / 2), 0))  # calculate horizontal position\n","        newImage.paste(img, (4, wtop))  # paste resized image on white canvas\n","    else:\n","        # Height is bigger. Heigth becomes 20 pixels.\n","        nwidth = int(round((20.0 / height * width), 0))  # resize width according to ratio height\n","        if (nwidth == 0):  # rare case but minimum is 1 pixel\n","            nwidth = 1\n","            # resize and sharpen\n","        img = im.resize((nwidth, 20), Image.ANTIALIAS).filter(ImageFilter.SHARPEN)\n","        wleft = int(round(((28 - nwidth) / 2), 0))  # caculate vertical pozition\n","        newImage.paste(img, (wleft, 4))  # paste resized image on white canvas\n","\n","    # newImage.save(\"sample.png\n","\n","    tv = list(newImage.getdata())  # get pixel values\n","\n","    # normalize pixels to 0 and 1. 0 is pure white, 1 is pure black.\n","    tva = [(255 - x) * 1.0 / 255.0 for x in tv]\n","    return tva"],"metadata":{"id":"gVWvP55UOSG7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##TODO 1: 여러분의 PNG 파일 변환\n","Colab으로 0.png ~ 9.png를 복사한 후 진행하세요."],"metadata":{"id":"zoR_e3O-N6Li"}},{"cell_type":"code","source":["import numpy as np\n","\n","# 10장의 28 x 28 크기, 흑백 1채널\n","img_array = np.empty((10,28,28,1))\n","\n","for i in range(10):\n","  # 리스트를 NumPy 배열로 변환\n","  img = np.array(image_prepare(f'{i}.png'))\n","  # (784, ) -> (28, 28, 1)\n","  img_array[i] = img.reshape(28, 28, 1)"],"metadata":{"id":"35HnOplHNxWD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## TODO 2: ImageDataGenerator 설정\n","\n","1. 0도부터 10도까지 무작위로 회전시키기\n","2. 이미지 너비를 10%까지 줄이거나 늘리기\n","3. 이미지 높이를 10%까지 줄이거나 늘리기\n","4. 이미지를 뒤집는 것을 허용해야 할까요? \n","5. 이미지를 왼쪽 오른쪽으로 뒤집는 것을 허용해야 할까요? \n","\n","Hint: https://keras.io/ko/preprocessing/image/"],"metadata":{"id":"rOCNAOfSOqok"}},{"cell_type":"code","source":["from keras.preprocessing.image import ImageDataGenerator\n","\n","datagen = ImageDataGenerator(   \n","    rotation_range=10,\n","    width_shift_range=0.1,\n","    height_shift_range=0.1,\n","    horizontal_flip=False,\n","    vertical_flip=False)"],"metadata":{"id":"7ifBHoC3O468"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## TODO 3: Image 생성"],"metadata":{"id":"OzWDrAKlQL8w"}},{"cell_type":"code","source":["# 여러분의 0을 그려보세요.\n","import matplotlib.pyplot as plt\n","\n","# 그릴 때에는 (28, 28, 1)을 (28, 28)로 reshape하세요.\n","digit = img_array[0].reshape(28,28)\n","plt.imshow(digit, cmap=plt.cm.binary)\n","plt.show()"],"metadata":{"id":"iMl9SKp4QQnA","colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"status":"ok","timestamp":1648193806743,"user_tz":-540,"elapsed":4,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"79d52c98-96af-4438-86c4-0896e9e89116"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# 여러분의 0을 변환해서 무작위로 5개의 0을 만들어 그려보세요.\n","new_zeroes = []\n","\n","for i in range(5):\n","  # random_transform 입력에 이미지 입력\n","  new_zero = datagen.random_transform(digit.reshape(28,28,1))\n","  # new_zero에 reshape 필요\n","  plt.imshow(new_zero.reshape(28,28), cmap=plt.cm.binary)\n","  plt.show()"],"metadata":{"id":"e8vM3gHjQUoV","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1648193807928,"user_tz":-540,"elapsed":596,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"68c79b9d-f581-4cd4-80de-5a4767c0ee62"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["## MNIST 불러와서 전처리하기"],"metadata":{"id":"tDi1iul9ULLC"}},{"cell_type":"code","source":["import keras\n","from tensorflow.keras.utils import to_categorical\n","\n","# Model / data parameters\n","num_classes = 10\n","input_shape = (28, 28, 1)\n","\n","# the data, split between train and test sets\n","(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()\n","\n","# Scale images to the [0, 1] range\n","x_train = x_train.astype(\"float32\") / 255\n","x_test = x_test.astype(\"float32\") / 255\n","# Make sure images have shape (28, 28, 1)\n","x_train = np.expand_dims(x_train, -1)\n","x_test = np.expand_dims(x_test, -1)\n","print(\"x_train shape:\", x_train.shape)\n","print(x_train.shape[0], \"train samples\")\n","print(x_test.shape[0], \"test samples\")\n","\n","# convert class vectors to binary class matrices\n","y_train = to_categorical(y_train, num_classes)\n","y_test = to_categorical(y_test, num_classes)"],"metadata":{"id":"Q-IavF0wUPNn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648193812529,"user_tz":-540,"elapsed":989,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"ee1fb0cd-3f0a-4ee4-cf0a-f2e3ade399de"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n","11501568/11490434 [==============================] - 0s 0us/step\n","x_train shape: (60000, 28, 28, 1)\n","60000 train samples\n","10000 test samples\n"]}]},{"cell_type":"markdown","source":[""],"metadata":{"id":"ZdVZkvHxEZB6"}},{"cell_type":"markdown","source":["## 모델 정의\n"],"metadata":{"id":"oOp8b_unSV3z"}},{"cell_type":"code","source":["from keras import models\n","from keras import layers\n","\n","model = models.Sequential()\n","\n","model.add(layers.Conv2D(filters=64, kernel_size = (3,3), activation=\"relu\", input_shape=(28,28,1)))\n","model.add(layers.Conv2D(filters=64, kernel_size = (3,3), activation=\"relu\"))\n","model.add(layers.MaxPooling2D(pool_size=(2,2)))\n","\n","model.add(layers.Conv2D(filters=128, kernel_size = (3,3), activation=\"relu\"))\n","model.add(layers.Conv2D(filters=128, kernel_size = (3,3), activation=\"relu\"))\n","model.add(layers.MaxPooling2D(pool_size=(2,2)))\n","\n","model.add(layers.Conv2D(filters=256, kernel_size = (3,3), activation=\"relu\"))    \n","model.add(layers.MaxPooling2D(pool_size=(2,2)))\n","\n","model.add(layers.Flatten())\n","model.add(layers.Dense(512,activation=\"relu\"))    \n","model.add(layers.Dense(10,activation=\"softmax\"))\n","    \n","model.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])"],"metadata":{"id":"xRXWU7HySnJe"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 모델 훈련\n","고정된 훈련 데이터가 아니라 datagen을 통해 변환된 훈련 데이터로 훈련합니다. 기존과 달리 동일한 이미지를 반복해서 보지 않습니다."],"metadata":{"id":"WLT-21NcToBz"}},{"cell_type":"code","source":["epochs = 15\n","batch_size = 64\n","\n","# train_gen은 x (그림)과 y (label)을 함께 생성합니다.\n","train_gen = datagen.flow(x_train, y_train, batch_size=batch_size)\n","\n","# generator 사용 시 y 값을 주면 안되고, validation_split은 사용할 수 없습니다.\n","model.fit(train_gen, epochs=epochs)"],"metadata":{"id":"CKYHv4qCUGcO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648194314729,"user_tz":-540,"elapsed":497783,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"7dca7fcf-11ea-4b8d-ea5d-cb2ca4be0cc0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/15\n","938/938 [==============================] - 43s 35ms/step - loss: 0.1887 - accuracy: 0.9393\n","Epoch 2/15\n","938/938 [==============================] - 33s 36ms/step - loss: 0.0589 - accuracy: 0.9822\n","Epoch 3/15\n","938/938 [==============================] - 33s 35ms/step - loss: 0.0460 - accuracy: 0.9867\n","Epoch 4/15\n","938/938 [==============================] - 32s 34ms/step - loss: 0.0383 - accuracy: 0.9891\n","Epoch 5/15\n","938/938 [==============================] - 32s 34ms/step - loss: 0.0360 - accuracy: 0.9894\n","Epoch 6/15\n","938/938 [==============================] - 32s 34ms/step - loss: 0.0320 - accuracy: 0.9906\n","Epoch 7/15\n","938/938 [==============================] - 33s 35ms/step - loss: 0.0292 - accuracy: 0.9913\n","Epoch 8/15\n","938/938 [==============================] - 32s 35ms/step - loss: 0.0269 - accuracy: 0.9921\n","Epoch 9/15\n","938/938 [==============================] - 33s 35ms/step - loss: 0.0252 - accuracy: 0.9922\n","Epoch 10/15\n","938/938 [==============================] - 32s 34ms/step - loss: 0.0225 - accuracy: 0.9934\n","Epoch 11/15\n","938/938 [==============================] - 32s 34ms/step - loss: 0.0219 - accuracy: 0.9932\n","Epoch 12/15\n","938/938 [==============================] - 32s 34ms/step - loss: 0.0214 - accuracy: 0.9938\n","Epoch 13/15\n","938/938 [==============================] - 32s 34ms/step - loss: 0.0182 - accuracy: 0.9941\n","Epoch 14/15\n","938/938 [==============================] - 32s 35ms/step - loss: 0.0195 - accuracy: 0.9947\n","Epoch 15/15\n","938/938 [==============================] - 32s 34ms/step - loss: 0.0183 - accuracy: 0.9948\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fcf948f26d0>"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":[""],"metadata":{"id":"-MbXDrn9HCS1"}},{"cell_type":"markdown","source":["## 모델 평가"],"metadata":{"id":"_8d_GiRBcDJo"}},{"cell_type":"code","source":["score = model.evaluate(x_test, y_test, verbose=0)\n","print(\"Test loss:\", score[0])\n","print(\"Test accuracy:\", score[1])"],"metadata":{"id":"qzcHxWwLcGbb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648194317965,"user_tz":-540,"elapsed":3238,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"c5a31c1c-3fc2-470b-a604-9eb7d3f95749"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Test loss: 0.01504766196012497\n","Test accuracy: 0.995199978351593\n"]}]},{"cell_type":"markdown","source":["## TODO4: 여러분의 그림 10장 예측하기"],"metadata":{"id":"mEdx32l0Wsrp"}},{"cell_type":"code","source":["res = model.predict(img_array)\n","# 0, 1, 2, ..., 9가 순서대로 나와야 이상적인 결과입니다.\n","for r in res:\n","  print(np.argmax(r))"],"metadata":{"id":"fQwCpBoCWvsr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648194317966,"user_tz":-540,"elapsed":10,"user":{"displayName":"조현민","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13701119480392953941"}},"outputId":"d5a97cbf-9970-4a8a-9ebf-cedf61b1de96"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["9\n","1\n","2\n","3\n","4\n","5\n","1\n","1\n","8\n","9\n"]}]},{"cell_type":"code","source":["# 70%"],"metadata":{"id":"X-2NJp1j9tt1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[""],"metadata":{"id":"vhvtjkld9tUO"}}]}